
Operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc0  08007fc0  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08007fc0  08007fc0  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fc0  08007fc0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08007fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c4  20000110  080080d8  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022d4  080080d8  000222d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192b7  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036e6  00000000  00000000  000393f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a8  00000000  00000000  0003cad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001540  00000000  00000000  0003e180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001afc7  00000000  00000000  0003f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000129f4  00000000  00000000  0005a687  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b666  00000000  00000000  0006d07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001086e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006130  00000000  00000000  0010875c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000110 	.word	0x20000110
 800012c:	00000000 	.word	0x00000000
 8000130:	08007080 	.word	0x08007080

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000114 	.word	0x20000114
 800014c:	08007080 	.word	0x08007080

08000150 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	b29a      	uxth	r2, r3
 8000166:	79bb      	ldrb	r3, [r7, #6]
 8000168:	b29b      	uxth	r3, r3
 800016a:	4413      	add	r3, r2
 800016c:	b29a      	uxth	r2, r3
 800016e:	797b      	ldrb	r3, [r7, #5]
 8000170:	b29b      	uxth	r3, r3
 8000172:	4413      	add	r3, r2
 8000174:	b29b      	uxth	r3, r3
 8000176:	f203 1305 	addw	r3, r3, #261	; 0x105
 800017a:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 800017c:	8afb      	ldrh	r3, [r7, #22]
 800017e:	425b      	negs	r3, r3
 8000180:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8000182:	237e      	movs	r3, #126	; 0x7e
 8000184:	733b      	strb	r3, [r7, #12]
 8000186:	23ff      	movs	r3, #255	; 0xff
 8000188:	737b      	strb	r3, [r7, #13]
 800018a:	2306      	movs	r3, #6
 800018c:	73bb      	strb	r3, [r7, #14]
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	73fb      	strb	r3, [r7, #15]
 8000192:	2300      	movs	r3, #0
 8000194:	743b      	strb	r3, [r7, #16]
 8000196:	79bb      	ldrb	r3, [r7, #6]
 8000198:	747b      	strb	r3, [r7, #17]
 800019a:	797b      	ldrb	r3, [r7, #5]
 800019c:	74bb      	strb	r3, [r7, #18]
 800019e:	8afb      	ldrh	r3, [r7, #22]
 80001a0:	0a1b      	lsrs	r3, r3, #8
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	74fb      	strb	r3, [r7, #19]
 80001a8:	8afb      	ldrh	r3, [r7, #22]
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	753b      	strb	r3, [r7, #20]
 80001ae:	23ef      	movs	r3, #239	; 0xef
 80001b0:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 80001b2:	f107 010c 	add.w	r1, r7, #12
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	220a      	movs	r2, #10
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <Send_cmd+0x7c>)
 80001be:	f004 f9ee 	bl	800459e <HAL_UART_Transmit>
}
 80001c2:	bf00      	nop
 80001c4:	3718      	adds	r7, #24
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20002228 	.word	0x20002228

080001d0 <DF_Init>:
  //HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80001da:	2202      	movs	r2, #2
 80001dc:	2100      	movs	r1, #0
 80001de:	203f      	movs	r0, #63	; 0x3f
 80001e0:	f7ff ffb6 	bl	8000150 <Send_cmd>
	HAL_Delay(200);
 80001e4:	20c8      	movs	r0, #200	; 0xc8
 80001e6:	f001 fca7 	bl	8001b38 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	461a      	mov	r2, r3
 80001ee:	2100      	movs	r1, #0
 80001f0:	2006      	movs	r0, #6
 80001f2:	f7ff ffad 	bl	8000150 <Send_cmd>
	HAL_Delay(500);
 80001f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001fa:	f001 fc9d 	bl	8001b38 <HAL_Delay>
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a06      	ldr	r2, [pc, #24]	; (8000230 <vApplicationGetIdleTaskMemory+0x28>)
 8000218:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	4a05      	ldr	r2, [pc, #20]	; (8000234 <vApplicationGetIdleTaskMemory+0x2c>)
 800021e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2280      	movs	r2, #128	; 0x80
 8000224:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	2000012c 	.word	0x2000012c
 8000234:	20000180 	.word	0x20000180

08000238 <fallingEdge>:

#define SET_IF(expr)  ((expr) ? GPIO_PIN_SET : GPIO_PIN_RESET)
char display_settings;

//Sending falling edge signal to EPin for waking up LCD
static void fallingEdge(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_CMD_PORT, E_Pin, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000242:	480a      	ldr	r0, [pc, #40]	; (800026c <fallingEdge+0x34>)
 8000244:	f002 fb43 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_CMD_PORT, E_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024e:	4807      	ldr	r0, [pc, #28]	; (800026c <fallingEdge+0x34>)
 8000250:	f002 fb3d 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_CMD_PORT, E_Pin, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800025a:	4804      	ldr	r0, [pc, #16]	; (800026c <fallingEdge+0x34>)
 800025c:	f002 fb37 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000260:	2001      	movs	r0, #1
 8000262:	f001 fc69 	bl	8001b38 <HAL_Delay>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40010800 	.word	0x40010800

08000270 <send4Bits>:

#ifndef LCD8Bit
	static void send4Bits(char data) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIO_PORT, DATA5_Pin, SET_IF(data&0x01));
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	461a      	mov	r2, r3
 8000284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000288:	4816      	ldr	r0, [pc, #88]	; (80002e4 <send4Bits+0x74>)
 800028a:	f002 fb20 	bl	80028ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA6_Pin, SET_IF(data&0x02));
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	105b      	asrs	r3, r3, #1
 8000292:	b2db      	uxtb	r3, r3
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a0:	4810      	ldr	r0, [pc, #64]	; (80002e4 <send4Bits+0x74>)
 80002a2:	f002 fb14 	bl	80028ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA7_Pin, SET_IF(data&0x04));
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	109b      	asrs	r3, r3, #2
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	461a      	mov	r2, r3
 80002b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b8:	480a      	ldr	r0, [pc, #40]	; (80002e4 <send4Bits+0x74>)
 80002ba:	f002 fb08 	bl	80028ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA8_Pin, SET_IF(data&0x08));
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	10db      	asrs	r3, r3, #3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <send4Bits+0x74>)
 80002d2:	f002 fafc 	bl	80028ce <HAL_GPIO_WritePin>

		fallingEdge();
 80002d6:	f7ff ffaf 	bl	8000238 <fallingEdge>
	}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <sendCommand>:

		fallingEdge();
	}
#endif

static void sendCommand(char cmd) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_CMD_PORT, RS_Pin, GPIO_PIN_RESET);
		send8Bits(cmd);
	#else
	    HAL_GPIO_WritePin(GPIO_CMD_PORT, RS_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	4808      	ldr	r0, [pc, #32]	; (800031c <sendCommand+0x34>)
 80002fa:	f002 fae8 	bl	80028ce <HAL_GPIO_WritePin>
		send4Bits(cmd >> 4);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	091b      	lsrs	r3, r3, #4
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ffb3 	bl	8000270 <send4Bits>
		send4Bits(cmd);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffaf 	bl	8000270 <send4Bits>
	#endif
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010800 	.word	0x40010800

08000320 <sendData>:

static void sendData(char data) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_CMD_PORT, RS_Pin, GPIO_PIN_SET);
		send8Bits(data);
	#else
	    HAL_GPIO_WritePin(GPIO_CMD_PORT, RS_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000330:	4808      	ldr	r0, [pc, #32]	; (8000354 <sendData+0x34>)
 8000332:	f002 facc 	bl	80028ce <HAL_GPIO_WritePin>
		send4Bits(data >> 4);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	091b      	lsrs	r3, r3, #4
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff97 	bl	8000270 <send4Bits>
		send4Bits(data);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff93 	bl	8000270 <send4Bits>
	#endif
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010800 	.word	0x40010800

08000358 <clearLCD>:

void clearLCD(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	sendCommand(LCD_CLEARDISPLAY);
 800035c:	2001      	movs	r0, #1
 800035e:	f7ff ffc3 	bl	80002e8 <sendCommand>
	HAL_Delay(5);
 8000362:	2005      	movs	r0, #5
 8000364:	f001 fbe8 	bl	8001b38 <HAL_Delay>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <writeLCD>:

void putLCD(char c) {
	sendData(c);
}

void writeLCD (char *str) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	for(; *str != 0; ++str) {
 8000374:	e007      	b.n	8000386 <writeLCD+0x1a>
		sendData(*str);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffd0 	bl	8000320 <sendData>
	for(; *str != 0; ++str) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1f3      	bne.n	8000376 <writeLCD+0xa>
	}
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <initLCD>:

void initLCD(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_CMD_PORT, E_Pin,  	 GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	4827      	ldr	r0, [pc, #156]	; (8000440 <initLCD+0xa8>)
 80003a4:	f002 fa93 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_CMD_PORT, RS_Pin, 	 GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ae:	4824      	ldr	r0, [pc, #144]	; (8000440 <initLCD+0xa8>)
 80003b0:	f002 fa8d 	bl	80028ce <HAL_GPIO_WritePin>

	HAL_Delay(50);
 80003b4:	2032      	movs	r0, #50	; 0x32
 80003b6:	f001 fbbf 	bl	8001b38 <HAL_Delay>
		HAL_Delay(5);
		sendCommand(LCD_FUNCTIONSET | display_settings);
		HAL_Delay(5);

	#else
		display_settings = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <initLCD+0xac>)
 80003bc:	2208      	movs	r2, #8
 80003be:	701a      	strb	r2, [r3, #0]
		send4Bits(0x03);
 80003c0:	2003      	movs	r0, #3
 80003c2:	f7ff ff55 	bl	8000270 <send4Bits>
		HAL_Delay(5);
 80003c6:	2005      	movs	r0, #5
 80003c8:	f001 fbb6 	bl	8001b38 <HAL_Delay>
		send4Bits(0x03);
 80003cc:	2003      	movs	r0, #3
 80003ce:	f7ff ff4f 	bl	8000270 <send4Bits>
		HAL_Delay(5);
 80003d2:	2005      	movs	r0, #5
 80003d4:	f001 fbb0 	bl	8001b38 <HAL_Delay>
		send4Bits(0x03);
 80003d8:	2003      	movs	r0, #3
 80003da:	f7ff ff49 	bl	8000270 <send4Bits>
		HAL_Delay(2);
 80003de:	2002      	movs	r0, #2
 80003e0:	f001 fbaa 	bl	8001b38 <HAL_Delay>
		send4Bits(0x02);
 80003e4:	2002      	movs	r0, #2
 80003e6:	f7ff ff43 	bl	8000270 <send4Bits>
		HAL_Delay(2);
 80003ea:	2002      	movs	r0, #2
 80003ec:	f001 fba4 	bl	8001b38 <HAL_Delay>
	#endif
		sendCommand(LCD_FUNCTIONSET | display_settings);
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <initLCD+0xac>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	f043 0320 	orr.w	r3, r3, #32
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff74 	bl	80002e8 <sendCommand>
		display_settings = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <initLCD+0xac>)
 8000402:	2204      	movs	r2, #4
 8000404:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_DISPLAYCONTROL | display_settings);
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <initLCD+0xac>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff69 	bl	80002e8 <sendCommand>
		HAL_Delay(2);
 8000416:	2002      	movs	r0, #2
 8000418:	f001 fb8e 	bl	8001b38 <HAL_Delay>

		clearLCD();
 800041c:	f7ff ff9c 	bl	8000358 <clearLCD>
		display_settings =  LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000420:	4b08      	ldr	r3, [pc, #32]	; (8000444 <initLCD+0xac>)
 8000422:	2202      	movs	r2, #2
 8000424:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_ENTRYMODESET | display_settings);
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <initLCD+0xac>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff59 	bl	80002e8 <sendCommand>
		HAL_Delay(2);
 8000436:	2002      	movs	r0, #2
 8000438:	f001 fb7e 	bl	8001b38 <HAL_Delay>

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010800 	.word	0x40010800
 8000444:	200020e8 	.word	0x200020e8

08000448 <setCursor>:


void setCursor(char x, char y) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	460a      	mov	r2, r1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	4613      	mov	r3, r2
 8000456:	71bb      	strb	r3, [r7, #6]

	uint8_t base = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]

	if(y==1) {
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d102      	bne.n	8000468 <setCursor+0x20>
		base = 0x40;
 8000462:	2340      	movs	r3, #64	; 0x40
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	e001      	b.n	800046c <setCursor+0x24>
	}else {
		base = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]
	}

	sendCommand( 0x80 | (base + x));
 800046c:	7bfa      	ldrb	r2, [r7, #15]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4413      	add	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	b25b      	sxtb	r3, r3
 8000476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800047a:	b25b      	sxtb	r3, r3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff32 	bl	80002e8 <sendCommand>


}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <get_timeIn>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t get_timeIn(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
	uint32_t adc_value =0;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8000496:	480c      	ldr	r0, [pc, #48]	; (80004c8 <get_timeIn+0x3c>)
 8000498:	f001 fc48 	bl	8001d2c <HAL_ADC_Start>
		  // ADC poll for conversion
	HAL_ADC_PollForConversion(&hadc1, 100);
 800049c:	2164      	movs	r1, #100	; 0x64
 800049e:	480a      	ldr	r0, [pc, #40]	; (80004c8 <get_timeIn+0x3c>)
 80004a0:	f001 fd1e 	bl	8001ee0 <HAL_ADC_PollForConversion>
		  // get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc1);
 80004a4:	4808      	ldr	r0, [pc, #32]	; (80004c8 <get_timeIn+0x3c>)
 80004a6:	f001 fe21 	bl	80020ec <HAL_ADC_GetValue>
 80004aa:	6078      	str	r0, [r7, #4]
		  // end ADC conversion
	HAL_ADC_Stop(&hadc1);
 80004ac:	4806      	ldr	r0, [pc, #24]	; (80004c8 <get_timeIn+0x3c>)
 80004ae:	f001 fceb 	bl	8001e88 <HAL_ADC_Stop>
	/*	edit conversion from ADC to Time	*/
	uint8_t time = (uint8_t) (adc_value/10);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a05      	ldr	r2, [pc, #20]	; (80004cc <get_timeIn+0x40>)
 80004b6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ba:	08db      	lsrs	r3, r3, #3
 80004bc:	70fb      	strb	r3, [r7, #3]
	return time;
 80004be:	78fb      	ldrb	r3, [r7, #3]

}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200021e8 	.word	0x200021e8
 80004cc:	cccccccd 	.word	0xcccccccd

080004d0 <print_OLED>:

void print_OLED(OLED_type OLED, char* string)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	6039      	str	r1, [r7, #0]
 80004da:	71fb      	strb	r3, [r7, #7]
	switch(OLED)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d86e      	bhi.n	80005c0 <print_OLED+0xf0>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <print_OLED+0x18>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	0800052b 	.word	0x0800052b
 80004f0:	0800055d 	.word	0x0800055d
 80004f4:	0800058f 	.word	0x0800058f
	{
	case OLED1:
		ssd1306_SetCursor(0, 0);
 80004f8:	2100      	movs	r1, #0
 80004fa:	2000      	movs	r0, #0
 80004fc:	f001 f86c 	bl	80015d8 <ssd1306_SetCursor>
		  ssd1306_WriteString("Blue Player", Font_11x18, White);
 8000500:	4a32      	ldr	r2, [pc, #200]	; (80005cc <print_OLED+0xfc>)
 8000502:	2301      	movs	r3, #1
 8000504:	ca06      	ldmia	r2, {r1, r2}
 8000506:	4832      	ldr	r0, [pc, #200]	; (80005d0 <print_OLED+0x100>)
 8000508:	f001 f840 	bl	800158c <ssd1306_WriteString>

		  ssd1306_SetCursor(0, 36);
 800050c:	2124      	movs	r1, #36	; 0x24
 800050e:	2000      	movs	r0, #0
 8000510:	f001 f862 	bl	80015d8 <ssd1306_SetCursor>
		  ssd1306_WriteString(string, Font_11x18, White);
 8000514:	4a2d      	ldr	r2, [pc, #180]	; (80005cc <print_OLED+0xfc>)
 8000516:	2301      	movs	r3, #1
 8000518:	ca06      	ldmia	r2, {r1, r2}
 800051a:	6838      	ldr	r0, [r7, #0]
 800051c:	f001 f836 	bl	800158c <ssd1306_WriteString>

		  ssd1306_UpdateScreen(&hi2c1,OLED1_ADD);
 8000520:	2178      	movs	r1, #120	; 0x78
 8000522:	482c      	ldr	r0, [pc, #176]	; (80005d4 <print_OLED+0x104>)
 8000524:	f000 ff18 	bl	8001358 <ssd1306_UpdateScreen>
		break;
 8000528:	e04b      	b.n	80005c2 <print_OLED+0xf2>

	case OLED2:
		ssd1306_SetCursor(0, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	2000      	movs	r0, #0
 800052e:	f001 f853 	bl	80015d8 <ssd1306_SetCursor>
		ssd1306_WriteString("Red Player", Font_11x18, White);
 8000532:	4a26      	ldr	r2, [pc, #152]	; (80005cc <print_OLED+0xfc>)
 8000534:	2301      	movs	r3, #1
 8000536:	ca06      	ldmia	r2, {r1, r2}
 8000538:	4827      	ldr	r0, [pc, #156]	; (80005d8 <print_OLED+0x108>)
 800053a:	f001 f827 	bl	800158c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 36);
 800053e:	2124      	movs	r1, #36	; 0x24
 8000540:	2000      	movs	r0, #0
 8000542:	f001 f849 	bl	80015d8 <ssd1306_SetCursor>
		ssd1306_WriteString(string, Font_11x18, White);
 8000546:	4a21      	ldr	r2, [pc, #132]	; (80005cc <print_OLED+0xfc>)
 8000548:	2301      	movs	r3, #1
 800054a:	ca06      	ldmia	r2, {r1, r2}
 800054c:	6838      	ldr	r0, [r7, #0]
 800054e:	f001 f81d 	bl	800158c <ssd1306_WriteString>

		ssd1306_UpdateScreen(&hi2c1,OLED2_ADD);
 8000552:	217a      	movs	r1, #122	; 0x7a
 8000554:	481f      	ldr	r0, [pc, #124]	; (80005d4 <print_OLED+0x104>)
 8000556:	f000 feff 	bl	8001358 <ssd1306_UpdateScreen>
		break;
 800055a:	e032      	b.n	80005c2 <print_OLED+0xf2>

	case OLED3:
		ssd1306_SetCursor(0, 0);
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f001 f83a 	bl	80015d8 <ssd1306_SetCursor>
		ssd1306_WriteString("Green Player", Font_11x18, White);
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <print_OLED+0xfc>)
 8000566:	2301      	movs	r3, #1
 8000568:	ca06      	ldmia	r2, {r1, r2}
 800056a:	481c      	ldr	r0, [pc, #112]	; (80005dc <print_OLED+0x10c>)
 800056c:	f001 f80e 	bl	800158c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 36);
 8000570:	2124      	movs	r1, #36	; 0x24
 8000572:	2000      	movs	r0, #0
 8000574:	f001 f830 	bl	80015d8 <ssd1306_SetCursor>
		ssd1306_WriteString(string, Font_11x18, White);
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <print_OLED+0xfc>)
 800057a:	2301      	movs	r3, #1
 800057c:	ca06      	ldmia	r2, {r1, r2}
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f001 f804 	bl	800158c <ssd1306_WriteString>

		ssd1306_UpdateScreen(&hi2c2,OLED1_ADD);
 8000584:	2178      	movs	r1, #120	; 0x78
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <print_OLED+0x110>)
 8000588:	f000 fee6 	bl	8001358 <ssd1306_UpdateScreen>
		break;
 800058c:	e019      	b.n	80005c2 <print_OLED+0xf2>
	case OLED4:
		ssd1306_SetCursor(0, 0);
 800058e:	2100      	movs	r1, #0
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f821 	bl	80015d8 <ssd1306_SetCursor>
		ssd1306_WriteString("Yellow Player", Font_11x18, White);
 8000596:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <print_OLED+0xfc>)
 8000598:	2301      	movs	r3, #1
 800059a:	ca06      	ldmia	r2, {r1, r2}
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <print_OLED+0x114>)
 800059e:	f000 fff5 	bl	800158c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 36);
 80005a2:	2124      	movs	r1, #36	; 0x24
 80005a4:	2000      	movs	r0, #0
 80005a6:	f001 f817 	bl	80015d8 <ssd1306_SetCursor>
		ssd1306_WriteString(string, Font_11x18, White);
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <print_OLED+0xfc>)
 80005ac:	2301      	movs	r3, #1
 80005ae:	ca06      	ldmia	r2, {r1, r2}
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f000 ffeb 	bl	800158c <ssd1306_WriteString>

		ssd1306_UpdateScreen(&hi2c2,OLED2_ADD);
 80005b6:	217a      	movs	r1, #122	; 0x7a
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <print_OLED+0x110>)
 80005ba:	f000 fecd 	bl	8001358 <ssd1306_UpdateScreen>
		break;
 80005be:	e000      	b.n	80005c2 <print_OLED+0xf2>

	default:
		break;
 80005c0:	bf00      	nop

	}

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	080070b4 	.word	0x080070b4
 80005d4:	200020f4 	.word	0x200020f4
 80005d8:	080070c0 	.word	0x080070c0
 80005dc:	080070cc 	.word	0x080070cc
 80005e0:	20002148 	.word	0x20002148
 80005e4:	080070dc 	.word	0x080070dc

080005e8 <Start_Game>:

void Start_Game(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
	vTaskSuspend(GamePlayHandle);
 80005ee:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <Start_Game+0xfc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 ff5c 	bl	80054b0 <vTaskSuspend>
	char *ttl = "To skip Tutorial, Press Start";
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <Start_Game+0x100>)
 80005fa:	60fb      	str	r3, [r7, #12]
		  	clearLCD();
 80005fc:	f7ff feac 	bl	8000358 <clearLCD>
		  	setCursor(0,0);
 8000600:	2100      	movs	r1, #0
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff ff20 	bl	8000448 <setCursor>
		  	writeLCD(ttl);
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f7ff feaf 	bl	800036c <writeLCD>

		    Start_Time = 5;
 800060e:	4b37      	ldr	r3, [pc, #220]	; (80006ec <Start_Game+0x104>)
 8000610:	2205      	movs	r2, #5
 8000612:	701a      	strb	r2, [r3, #0]
		    State=Waiting;
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <Start_Game+0x108>)
 8000616:	2202      	movs	r2, #2
 8000618:	701a      	strb	r2, [r3, #0]
		    while(State ==Waiting)
 800061a:	e009      	b.n	8000630 <Start_Game+0x48>
		    {
		    	if (HAL_GPIO_ReadPin(Button_Start_GPIO_Port, Button_Start_Pin))
 800061c:	2101      	movs	r1, #1
 800061e:	4835      	ldr	r0, [pc, #212]	; (80006f4 <Start_Game+0x10c>)
 8000620:	f002 f93e 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <Start_Game+0x48>
		    	{
		    		State = Interrupted;
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <Start_Game+0x108>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
		    while(State ==Waiting)
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <Start_Game+0x108>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d0f1      	beq.n	800061c <Start_Game+0x34>
		    	}
		    }

		    if (State ==Interrupted)
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <Start_Game+0x108>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d01b      	beq.n	8000678 <Start_Game+0x90>
		    {

		    }
		    else
		    {
		    	clearLCD();
 8000640:	f7ff fe8a 	bl	8000358 <clearLCD>
		    	ttl = "Explain Game";
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <Start_Game+0x110>)
 8000646:	60fb      	str	r3, [r7, #12]
		    	writeLCD(ttl);
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f7ff fe8f 	bl	800036c <writeLCD>

		    	Start_Time = 5;
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <Start_Game+0x104>)
 8000650:	2205      	movs	r2, #5
 8000652:	701a      	strb	r2, [r3, #0]
		    	State = Waiting;
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <Start_Game+0x108>)
 8000656:	2202      	movs	r2, #2
 8000658:	701a      	strb	r2, [r3, #0]
		    	while(State == Waiting)
 800065a:	e009      	b.n	8000670 <Start_Game+0x88>
		    	{
		    		if (HAL_GPIO_ReadPin(Button_Start_GPIO_Port, Button_Start_Pin))
 800065c:	2101      	movs	r1, #1
 800065e:	4825      	ldr	r0, [pc, #148]	; (80006f4 <Start_Game+0x10c>)
 8000660:	f002 f91e 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <Start_Game+0x88>
		    		{
		    			State = Interrupted;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <Start_Game+0x108>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
		    	while(State == Waiting)
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <Start_Game+0x108>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d0f1      	beq.n	800065c <Start_Game+0x74>
		    	}


		    }

	clearLCD();
 8000678:	f7ff fe6e 	bl	8000358 <clearLCD>
	writeLCD("Set Game Time");
 800067c:	481f      	ldr	r0, [pc, #124]	; (80006fc <Start_Game+0x114>)
 800067e:	f7ff fe75 	bl	800036c <writeLCD>
	setCursor(10,1);
 8000682:	2101      	movs	r1, #1
 8000684:	200a      	movs	r0, #10
 8000686:	f7ff fedf 	bl	8000448 <setCursor>
	writeLCD("Start");
 800068a:	481d      	ldr	r0, [pc, #116]	; (8000700 <Start_Game+0x118>)
 800068c:	f7ff fe6e 	bl	800036c <writeLCD>
	while(!HAL_GPIO_ReadPin(Button_Start_GPIO_Port, Button_Start_Pin))
 8000690:	e012      	b.n	80006b8 <Start_Game+0xd0>
	{
		setCursor(0,1);
 8000692:	2101      	movs	r1, #1
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff fed7 	bl	8000448 <setCursor>
		char Str_Buffer[6];
		sprintf(Str_Buffer, "%d", get_timeIn());
 800069a:	f7ff fef7 	bl	800048c <get_timeIn>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4917      	ldr	r1, [pc, #92]	; (8000704 <Start_Game+0x11c>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 f8e2 	bl	8006870 <siprintf>
		Str_Buffer[5]='\0';
 80006ac:	2300      	movs	r3, #0
 80006ae:	727b      	strb	r3, [r7, #9]
		writeLCD(Str_Buffer);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fe5a 	bl	800036c <writeLCD>
	while(!HAL_GPIO_ReadPin(Button_Start_GPIO_Port, Button_Start_Pin))
 80006b8:	2101      	movs	r1, #1
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <Start_Game+0x10c>)
 80006bc:	f002 f8f0 	bl	80028a0 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0e5      	beq.n	8000692 <Start_Game+0xaa>
	}

	Start_Time=get_timeIn();
 80006c6:	f7ff fee1 	bl	800048c <get_timeIn>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <Start_Game+0x104>)
 80006d0:	701a      	strb	r2, [r3, #0]
	vTaskResume(GamePlayHandle);
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <Start_Game+0xfc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 ffb6 	bl	8005648 <vTaskResume>

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000219c 	.word	0x2000219c
 80006e8:	080070ec 	.word	0x080070ec
 80006ec:	20000088 	.word	0x20000088
 80006f0:	20000380 	.word	0x20000380
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	0800710c 	.word	0x0800710c
 80006fc:	0800711c 	.word	0x0800711c
 8000700:	0800712c 	.word	0x0800712c
 8000704:	08007134 	.word	0x08007134

08000708 <End_Game>:

void End_Game(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	vTaskSuspend(LCDHandle);
 800070e:	4b43      	ldr	r3, [pc, #268]	; (800081c <End_Game+0x114>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fecc 	bl	80054b0 <vTaskSuspend>

	uint32_t max_score =0;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
	Start_Time =-1;
 800071c:	4b40      	ldr	r3, [pc, #256]	; (8000820 <End_Game+0x118>)
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	701a      	strb	r2, [r3, #0]
	State = Interrupted;
 8000722:	4b40      	ldr	r3, [pc, #256]	; (8000824 <End_Game+0x11c>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]

	for (uint8_t player_num=0;player_num < 4 ; player_num++)
 8000728:	2300      	movs	r3, #0
 800072a:	70fb      	strb	r3, [r7, #3]
 800072c:	e00e      	b.n	800074c <End_Game+0x44>
	{
		if(max_score > Score_Player[player_num])
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	4a3d      	ldr	r2, [pc, #244]	; (8000828 <End_Game+0x120>)
 8000732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d904      	bls.n	8000746 <End_Game+0x3e>
		{
			max_score = Score_Player[player_num];
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	4a3a      	ldr	r2, [pc, #232]	; (8000828 <End_Game+0x120>)
 8000740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000744:	607b      	str	r3, [r7, #4]
	for (uint8_t player_num=0;player_num < 4 ; player_num++)
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	3301      	adds	r3, #1
 800074a:	70fb      	strb	r3, [r7, #3]
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d9ed      	bls.n	800072e <End_Game+0x26>
		}

	}

	clearLCD();
 8000752:	f7ff fe01 	bl	8000358 <clearLCD>

	if(max_score>0)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02c      	beq.n	80007b6 <End_Game+0xae>
	{
		writeLCD("Winner:");
 800075c:	4833      	ldr	r0, [pc, #204]	; (800082c <End_Game+0x124>)
 800075e:	f7ff fe05 	bl	800036c <writeLCD>
		setCursor(0,1);
 8000762:	2101      	movs	r1, #1
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fe6f 	bl	8000448 <setCursor>
		for (uint8_t player_num=0;player_num < 4 ; player_num++)
 800076a:	2300      	movs	r3, #0
 800076c:	70bb      	strb	r3, [r7, #2]
 800076e:	e01e      	b.n	80007ae <End_Game+0xa6>
			{
				if(max_score == Score_Player[player_num])
 8000770:	78bb      	ldrb	r3, [r7, #2]
 8000772:	4a2d      	ldr	r2, [pc, #180]	; (8000828 <End_Game+0x120>)
 8000774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	d10f      	bne.n	800079e <End_Game+0x96>
				{
					print_OLED(player_num, "Winner!");
 800077e:	78bb      	ldrb	r3, [r7, #2]
 8000780:	492b      	ldr	r1, [pc, #172]	; (8000830 <End_Game+0x128>)
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fea4 	bl	80004d0 <print_OLED>

					writeLCD(Colors[player_num]);
 8000788:	78bb      	ldrb	r3, [r7, #2]
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <End_Game+0x12c>)
 800078c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fdeb 	bl	800036c <writeLCD>
					writeLCD(" ");
 8000796:	4828      	ldr	r0, [pc, #160]	; (8000838 <End_Game+0x130>)
 8000798:	f7ff fde8 	bl	800036c <writeLCD>
 800079c:	e004      	b.n	80007a8 <End_Game+0xa0>

				}
				else
				{
					print_OLED(player_num, "Game Over");
 800079e:	78bb      	ldrb	r3, [r7, #2]
 80007a0:	4926      	ldr	r1, [pc, #152]	; (800083c <End_Game+0x134>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fe94 	bl	80004d0 <print_OLED>
		for (uint8_t player_num=0;player_num < 4 ; player_num++)
 80007a8:	78bb      	ldrb	r3, [r7, #2]
 80007aa:	3301      	adds	r3, #1
 80007ac:	70bb      	strb	r3, [r7, #2]
 80007ae:	78bb      	ldrb	r3, [r7, #2]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d9dd      	bls.n	8000770 <End_Game+0x68>
 80007b4:	e010      	b.n	80007d8 <End_Game+0xd0>
				}

			}
	}
	else{
		for (uint8_t player_num=0;player_num < 4 ; player_num++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	707b      	strb	r3, [r7, #1]
 80007ba:	e007      	b.n	80007cc <End_Game+0xc4>
					{

							print_OLED(player_num, "Game Over");
 80007bc:	787b      	ldrb	r3, [r7, #1]
 80007be:	491f      	ldr	r1, [pc, #124]	; (800083c <End_Game+0x134>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe85 	bl	80004d0 <print_OLED>
		for (uint8_t player_num=0;player_num < 4 ; player_num++)
 80007c6:	787b      	ldrb	r3, [r7, #1]
 80007c8:	3301      	adds	r3, #1
 80007ca:	707b      	strb	r3, [r7, #1]
 80007cc:	787b      	ldrb	r3, [r7, #1]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d9f4      	bls.n	80007bc <End_Game+0xb4>

					}
		writeLCD("No Winners");
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <End_Game+0x138>)
 80007d4:	f7ff fdca 	bl	800036c <writeLCD>
	}



	Start_Time = 15;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <End_Game+0x118>)
 80007da:	220f      	movs	r2, #15
 80007dc:	701a      	strb	r2, [r3, #0]
	State=Waiting;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <End_Game+0x11c>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	701a      	strb	r2, [r3, #0]
	while(State ==Waiting)
 80007e4:	e00c      	b.n	8000800 <End_Game+0xf8>
	{
		if (HAL_GPIO_ReadPin(Button_Start_GPIO_Port, Button_Start_Pin))
 80007e6:	2101      	movs	r1, #1
 80007e8:	4816      	ldr	r0, [pc, #88]	; (8000844 <End_Game+0x13c>)
 80007ea:	f002 f859 	bl	80028a0 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <End_Game+0xf8>
		{
			State = Interrupted;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <End_Game+0x11c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
			Start_Time=-1;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <End_Game+0x118>)
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	701a      	strb	r2, [r3, #0]
	while(State ==Waiting)
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <End_Game+0x11c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d0ee      	beq.n	80007e6 <End_Game+0xde>
		}
	}
	vTaskResume(LCDHandle);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <End_Game+0x114>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f004 ff1b 	bl	8005648 <vTaskResume>


}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000226c 	.word	0x2000226c
 8000820:	20000088 	.word	0x20000088
 8000824:	20000380 	.word	0x20000380
 8000828:	20002218 	.word	0x20002218
 800082c:	08007138 	.word	0x08007138
 8000830:	08007140 	.word	0x08007140
 8000834:	2000008c 	.word	0x2000008c
 8000838:	08007148 	.word	0x08007148
 800083c:	0800714c 	.word	0x0800714c
 8000840:	08007158 	.word	0x08007158
 8000844:	40010c00 	.word	0x40010c00

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b0a0      	sub	sp, #128	; 0x80
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f001 f941 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f8f3 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000856:	f000 fa53 	bl	8000d00 <MX_GPIO_Init>
  MX_I2C1_Init();
 800085a:	f000 f97d 	bl	8000b58 <MX_I2C1_Init>
  MX_I2C2_Init();
 800085e:	f000 f9a9 	bl	8000bb4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000862:	f000 fa23 	bl	8000cac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000866:	f000 f939 	bl	8000adc <MX_ADC1_Init>
  MX_TIM3_Init();
 800086a:	f000 f9d1 	bl	8000c10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800086e:	4865      	ldr	r0, [pc, #404]	; (8000a04 <main+0x1bc>)
 8000870:	f001 fa5c 	bl	8001d2c <HAL_ADC_Start>
  DF_Init(10);
 8000874:	200a      	movs	r0, #10
 8000876:	f7ff fcab 	bl	80001d0 <DF_Init>
  initLCD();
 800087a:	f7ff fd8d 	bl	8000398 <initLCD>
  // Init lcd using one of the stm32HAL i2c typedefs
  if (ssd1306_Init(&hi2c1,OLED1_ADD) != 0) {
 800087e:	2178      	movs	r1, #120	; 0x78
 8000880:	4861      	ldr	r0, [pc, #388]	; (8000a08 <main+0x1c0>)
 8000882:	f000 fbeb 	bl	800105c <ssd1306_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <main+0x48>
    Error_Handler();
 800088c:	f000 fbc5 	bl	800101a <Error_Handler>
  }

  if (ssd1306_Init(&hi2c1,OLED2_ADD) != 0) {
 8000890:	217a      	movs	r1, #122	; 0x7a
 8000892:	485d      	ldr	r0, [pc, #372]	; (8000a08 <main+0x1c0>)
 8000894:	f000 fbe2 	bl	800105c <ssd1306_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <main+0x5a>
      Error_Handler();
 800089e:	f000 fbbc 	bl	800101a <Error_Handler>
    }

  if (ssd1306_Init(&hi2c2,OLED1_ADD) != 0) {
 80008a2:	2178      	movs	r1, #120	; 0x78
 80008a4:	4859      	ldr	r0, [pc, #356]	; (8000a0c <main+0x1c4>)
 80008a6:	f000 fbd9 	bl	800105c <ssd1306_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <main+0x6c>
      Error_Handler();
 80008b0:	f000 fbb3 	bl	800101a <Error_Handler>
    }

  if (ssd1306_Init(&hi2c2,OLED2_ADD) != 0) {
 80008b4:	217a      	movs	r1, #122	; 0x7a
 80008b6:	4855      	ldr	r0, [pc, #340]	; (8000a0c <main+0x1c4>)
 80008b8:	f000 fbd0 	bl	800105c <ssd1306_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <main+0x7e>
      Error_Handler();
 80008c2:	f000 fbaa 	bl	800101a <Error_Handler>
    }
  HAL_Delay(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f001 f935 	bl	8001b38 <HAL_Delay>

  ssd1306_Fill(Black);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 fd20 	bl	8001314 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1,OLED1_ADD);
 80008d4:	2178      	movs	r1, #120	; 0x78
 80008d6:	484c      	ldr	r0, [pc, #304]	; (8000a08 <main+0x1c0>)
 80008d8:	f000 fd3e 	bl	8001358 <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fd19 	bl	8001314 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1,OLED2_ADD);
 80008e2:	217a      	movs	r1, #122	; 0x7a
 80008e4:	4848      	ldr	r0, [pc, #288]	; (8000a08 <main+0x1c0>)
 80008e6:	f000 fd37 	bl	8001358 <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fd12 	bl	8001314 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c2,OLED1_ADD);
 80008f0:	2178      	movs	r1, #120	; 0x78
 80008f2:	4846      	ldr	r0, [pc, #280]	; (8000a0c <main+0x1c4>)
 80008f4:	f000 fd30 	bl	8001358 <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fd0b 	bl	8001314 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c2,OLED2_ADD);
 80008fe:	217a      	movs	r1, #122	; 0x7a
 8000900:	4842      	ldr	r0, [pc, #264]	; (8000a0c <main+0x1c4>)
 8000902:	f000 fd29 	bl	8001358 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8000906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090a:	f001 f915 	bl	8001b38 <HAL_Delay>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of OLED1_sem */
  osSemaphoreDef(OLED1_sem);
 800090e:	2300      	movs	r3, #0
 8000910:	67bb      	str	r3, [r7, #120]	; 0x78
 8000912:	2300      	movs	r3, #0
 8000914:	67fb      	str	r3, [r7, #124]	; 0x7c
  OLED1_semHandle = osSemaphoreCreate(osSemaphore(OLED1_sem), 1);
 8000916:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800091a:	2101      	movs	r1, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f004 f827 	bl	8004970 <osSemaphoreCreate>
 8000922:	4602      	mov	r2, r0
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <main+0x1c8>)
 8000926:	601a      	str	r2, [r3, #0]

  /* definition and creation of OLED2_sem */
  osSemaphoreDef(OLED2_sem);
 8000928:	2300      	movs	r3, #0
 800092a:	673b      	str	r3, [r7, #112]	; 0x70
 800092c:	2300      	movs	r3, #0
 800092e:	677b      	str	r3, [r7, #116]	; 0x74
  OLED2_semHandle = osSemaphoreCreate(osSemaphore(OLED2_sem), 1);
 8000930:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000934:	2101      	movs	r1, #1
 8000936:	4618      	mov	r0, r3
 8000938:	f004 f81a 	bl	8004970 <osSemaphoreCreate>
 800093c:	4602      	mov	r2, r0
 800093e:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <main+0x1cc>)
 8000940:	601a      	str	r2, [r3, #0]

  /* definition and creation of OLED3_sem */
  osSemaphoreDef(OLED3_sem);
 8000942:	2300      	movs	r3, #0
 8000944:	66bb      	str	r3, [r7, #104]	; 0x68
 8000946:	2300      	movs	r3, #0
 8000948:	66fb      	str	r3, [r7, #108]	; 0x6c
  OLED3_semHandle = osSemaphoreCreate(osSemaphore(OLED3_sem), 1);
 800094a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800094e:	2101      	movs	r1, #1
 8000950:	4618      	mov	r0, r3
 8000952:	f004 f80d 	bl	8004970 <osSemaphoreCreate>
 8000956:	4602      	mov	r2, r0
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <main+0x1d0>)
 800095a:	601a      	str	r2, [r3, #0]

  /* definition and creation of OLED4_sem */
  osSemaphoreDef(OLED4_sem);
 800095c:	2300      	movs	r3, #0
 800095e:	663b      	str	r3, [r7, #96]	; 0x60
 8000960:	2300      	movs	r3, #0
 8000962:	667b      	str	r3, [r7, #100]	; 0x64
  OLED4_semHandle = osSemaphoreCreate(osSemaphore(OLED4_sem), 1);
 8000964:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f004 f800 	bl	8004970 <osSemaphoreCreate>
 8000970:	4602      	mov	r2, r0
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <main+0x1d4>)
 8000974:	601a      	str	r2, [r3, #0]

  /* definition and creation of Music_sem */
  osSemaphoreDef(Music_sem);
 8000976:	2300      	movs	r3, #0
 8000978:	65bb      	str	r3, [r7, #88]	; 0x58
 800097a:	2300      	movs	r3, #0
 800097c:	65fb      	str	r3, [r7, #92]	; 0x5c
  Music_semHandle = osSemaphoreCreate(osSemaphore(Music_sem), 1);
 800097e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fff3 	bl	8004970 <osSemaphoreCreate>
 800098a:	4602      	mov	r2, r0
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0x1d8>)
 800098e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LCD */
  osThreadDef(LCD, LCD_Function, osPriorityRealtime, 0, 128);
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <main+0x1dc>)
 8000992:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000996:	461d      	mov	r5, r3
 8000998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 80009a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 ff80 	bl	80048b0 <osThreadCreate>
 80009b0:	4602      	mov	r2, r0
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <main+0x1e0>)
 80009b4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Play_Sound */
  osThreadDef(Play_Sound, Sound_Function, osPriorityNormal, 0, 128);
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <main+0x1e4>)
 80009b8:	f107 0420 	add.w	r4, r7, #32
 80009bc:	461d      	mov	r5, r3
 80009be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Play_SoundHandle = osThreadCreate(osThread(Play_Sound), NULL);
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 ff6d 	bl	80048b0 <osThreadCreate>
 80009d6:	4602      	mov	r2, r0
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <main+0x1e8>)
 80009da:	601a      	str	r2, [r3, #0]

  /* definition and creation of GamePlay */
  osThreadDef(GamePlay, Game, osPriorityBelowNormal, 0, 128);
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <main+0x1ec>)
 80009de:	1d3c      	adds	r4, r7, #4
 80009e0:	461d      	mov	r5, r3
 80009e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GamePlayHandle = osThreadCreate(osThread(GamePlay), NULL);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 ff5c 	bl	80048b0 <osThreadCreate>
 80009f8:	4602      	mov	r2, r0
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <main+0x1f0>)
 80009fc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009fe:	f003 ff50 	bl	80048a2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <main+0x1ba>
 8000a04:	200021e8 	.word	0x200021e8
 8000a08:	200020f4 	.word	0x200020f4
 8000a0c:	20002148 	.word	0x20002148
 8000a10:	200020ec 	.word	0x200020ec
 8000a14:	20002278 	.word	0x20002278
 8000a18:	200020f0 	.word	0x200020f0
 8000a1c:	20002274 	.word	0x20002274
 8000a20:	20002280 	.word	0x20002280
 8000a24:	08007168 	.word	0x08007168
 8000a28:	2000226c 	.word	0x2000226c
 8000a2c:	08007190 	.word	0x08007190
 8000a30:	20002270 	.word	0x20002270
 8000a34:	080071b8 	.word	0x080071b8
 8000a38:	2000219c 	.word	0x2000219c

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a46:	2228      	movs	r2, #40	; 0x28
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 ff07 	bl	800685e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fb8b 	bl	800319c <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000a8c:	f000 fac5 	bl	800101a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a90:	230f      	movs	r3, #15
 8000a92:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fdf6 	bl	800369c <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ab6:	f000 fab0 	bl	800101a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aba:	2302      	movs	r3, #2
 8000abc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 ffb5 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ad0:	f000 faa3 	bl	800101a <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3750      	adds	r7, #80	; 0x50
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000aee:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <MX_ADC1_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000b06:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000b1a:	f001 f82f 	bl	8001b7c <HAL_ADC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 fa79 	bl	800101a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_ADC1_Init+0x74>)
 8000b3a:	f001 fae3 	bl	8002104 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b44:	f000 fa69 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200021e8 	.word	0x200021e8
 8000b54:	40012400 	.word	0x40012400

08000b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b64:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_I2C1_Init+0x58>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b96:	f001 feb3 	bl	8002900 <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 fa3b 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200020f4 	.word	0x200020f4
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	00061a80 	.word	0x00061a80

08000bb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <MX_I2C2_Init+0x54>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_I2C2_Init+0x58>)
 8000bc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_I2C2_Init+0x50>)
 8000bf2:	f001 fe85 	bl	8002900 <HAL_I2C_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bfc:	f000 fa0d 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20002148 	.word	0x20002148
 8000c08:	40005800 	.word	0x40005800
 8000c0c:	00061a80 	.word	0x00061a80

08000c10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <MX_TIM3_Init+0x98>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c34:	2247      	movs	r2, #71	; 0x47
 8000c36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c54:	f003 f860 	bl	8003d18 <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f000 f9dc 	bl	800101a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c70:	f003 f9fc 	bl	800406c <HAL_TIM_ConfigClockSource>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 f9ce 	bl	800101a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_TIM3_Init+0x94>)
 8000c8c:	f003 fbc2 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c96:	f000 f9c0 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200021a0 	.word	0x200021a0
 8000ca8:	40000400 	.word	0x40000400

08000cac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_USART1_UART_Init+0x50>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	f003 fc06 	bl	80044f4 <HAL_HalfDuplex_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cee:	f000 f994 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20002228 	.word	0x20002228
 8000cfc:	40013800 	.word	0x40013800

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a4c      	ldr	r2, [pc, #304]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b4a      	ldr	r3, [pc, #296]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b44      	ldr	r3, [pc, #272]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b41      	ldr	r3, [pc, #260]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a40      	ldr	r2, [pc, #256]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a3a      	ldr	r2, [pc, #232]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <MX_GPIO_Init+0x14c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Twizzer_1_Pin|Twizzer_2_Pin|Twizzer_3_Pin|Twizzer_4_Pin
 8000d74:	2200      	movs	r2, #0
 8000d76:	f248 3178 	movw	r1, #33656	; 0x8378
 8000d7a:	4835      	ldr	r0, [pc, #212]	; (8000e50 <MX_GPIO_Init+0x150>)
 8000d7c:	f001 fda7 	bl	80028ce <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_RS_Pin|Plate_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d86:	4833      	ldr	r0, [pc, #204]	; (8000e54 <MX_GPIO_Init+0x154>)
 8000d88:	f001 fda1 	bl	80028ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Plate_11_Pin Plate_12_Pin Plate_13_Pin */
  GPIO_InitStruct.Pin = Plate_11_Pin|Plate_12_Pin|Plate_13_Pin;
 8000d8c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	482d      	ldr	r0, [pc, #180]	; (8000e58 <MX_GPIO_Init+0x158>)
 8000da2:	f001 fc23 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Plate_1_Pin Plate_2_Pin Plate_3_Pin Plate_6_Pin
                           Plate_5_Pin Plate_4_Pin */
  GPIO_InitStruct.Pin = Plate_1_Pin|Plate_2_Pin|Plate_3_Pin|Plate_6_Pin
 8000da6:	f641 4307 	movw	r3, #7175	; 0x1c07
 8000daa:	613b      	str	r3, [r7, #16]
                          |Plate_5_Pin|Plate_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4825      	ldr	r0, [pc, #148]	; (8000e50 <MX_GPIO_Init+0x150>)
 8000dbc:	f001 fc16 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Twizzer_1_Pin Twizzer_2_Pin Twizzer_3_Pin Twizzer_4_Pin
                           LCD_EN_Pin LCD_RS_Pin Plate_7_Pin */
  GPIO_InitStruct.Pin = Twizzer_1_Pin|Twizzer_2_Pin|Twizzer_3_Pin|Twizzer_4_Pin
 8000dc0:	f248 3378 	movw	r3, #33656	; 0x8378
 8000dc4:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_RS_Pin|Plate_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481d      	ldr	r0, [pc, #116]	; (8000e50 <MX_GPIO_Init+0x150>)
 8000dda:	f001 fc07 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Start_Pin Buzzer_Event_Pin */
  GPIO_InitStruct.Pin = Button_Start_Pin|Buzzer_Event_Pin;
 8000dde:	2381      	movs	r3, #129	; 0x81
 8000de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	4818      	ldr	r0, [pc, #96]	; (8000e54 <MX_GPIO_Init+0x154>)
 8000df2:	f001 fbfb 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Reset_Pin */
  GPIO_InitStruct.Pin = Button_Reset_Pin;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_GPIO_Init+0x15c>)
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_Reset_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4812      	ldr	r0, [pc, #72]	; (8000e54 <MX_GPIO_Init+0x154>)
 8000e0a:	f001 fbef 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin LCD_D8_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin;
 8000e0e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <MX_GPIO_Init+0x154>)
 8000e28:	f001 fbe0 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Plate_8_Pin Plate_9_Pin Plate_10_Pin */
  GPIO_InitStruct.Pin = Plate_8_Pin|Plate_9_Pin|Plate_10_Pin;
 8000e2c:	2338      	movs	r3, #56	; 0x38
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_GPIO_Init+0x154>)
 8000e40:	f001 fbd4 	bl	80025ec <HAL_GPIO_Init>

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	10110000 	.word	0x10110000

08000e60 <LCD_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCD_Function */
void LCD_Function(void const * argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	Start_Game();
 8000e68:	f7ff fbbe 	bl	80005e8 <Start_Game>
  /* Infinite loop */
  for(;;)
  {
	  if(Start_Time >0)
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <LCD_Function+0x54>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d01a      	beq.n	8000eaa <LCD_Function+0x4a>
	  {
		  setCursor(0,1);
 8000e74:	2101      	movs	r1, #1
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fae6 	bl	8000448 <setCursor>
		  writeLCD("                ");
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <LCD_Function+0x58>)
 8000e7e:	f7ff fa75 	bl	800036c <writeLCD>
		  setCursor(0,1);
 8000e82:	2101      	movs	r1, #1
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fadf 	bl	8000448 <setCursor>
		  char Str_Buffer[6];
		  sprintf(Str_Buffer, "%d", Start_Time);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <LCD_Function+0x54>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	4909      	ldr	r1, [pc, #36]	; (8000ebc <LCD_Function+0x5c>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 fcea 	bl	8006870 <siprintf>
		  Str_Buffer[5]='\0';
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	737b      	strb	r3, [r7, #13]
		  writeLCD(Str_Buffer);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa61 	bl	800036c <writeLCD>
	  else if (Start_Time == -1)
	  {
		  Start_Game();
	  }

	  osDelay(400);
 8000eaa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000eae:	f003 fd4b 	bl	8004948 <osDelay>
	  if(Start_Time >0)
 8000eb2:	e7db      	b.n	8000e6c <LCD_Function+0xc>
 8000eb4:	20000088 	.word	0x20000088
 8000eb8:	080071d4 	.word	0x080071d4
 8000ebc:	08007134 	.word	0x08007134

08000ec0 <Sound_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sound_Function */
void Sound_Function(void const * argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sound_Function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f003 fd3d 	bl	8004948 <osDelay>
 8000ece:	e7fb      	b.n	8000ec8 <Sound_Function+0x8>

08000ed0 <Game>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Game */
void Game(void const * argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Game */
	uint8_t value =0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	757b      	strb	r3, [r7, #21]

  /* Infinite loop */
  for(;;)
  {

	  if(Start_Time >0)
 8000edc:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <Game+0x108>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d075      	beq.n	8000fd0 <Game+0x100>
	  {
		  for (uint8_t Twizzer =0;Twizzer<4;Twizzer++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
 8000ee8:	e06f      	b.n	8000fca <Game+0xfa>
		  {
			  HAL_GPIO_WritePin(GPIOA, Twizzer_1_Pin|Twizzer_2_Pin|Twizzer_3_Pin|Twizzer_4_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2178      	movs	r1, #120	; 0x78
 8000eee:	483b      	ldr	r0, [pc, #236]	; (8000fdc <Game+0x10c>)
 8000ef0:	f001 fced 	bl	80028ce <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,Twizzers_Pins[Twizzer],GPIO_PIN_SET);
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	4a3a      	ldr	r2, [pc, #232]	; (8000fe0 <Game+0x110>)
 8000ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	4836      	ldr	r0, [pc, #216]	; (8000fdc <Game+0x10c>)
 8000f02:	f001 fce4 	bl	80028ce <HAL_GPIO_WritePin>

			  HAL_Delay(5);		/* Till Twizzer is Charged */
 8000f06:	2005      	movs	r0, #5
 8000f08:	f000 fe16 	bl	8001b38 <HAL_Delay>

			  for(uint8_t plate=0;plate<13;plate++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	75bb      	strb	r3, [r7, #22]
 8000f10:	e050      	b.n	8000fb4 <Game+0xe4>
			  {
				  value=HAL_GPIO_ReadPin(Input_Position[plate].In_Port,Input_Position[plate].In_Pin);
 8000f12:	7dbb      	ldrb	r3, [r7, #22]
 8000f14:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <Game+0x114>)
 8000f16:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f1a:	7dbb      	ldrb	r3, [r7, #22]
 8000f1c:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <Game+0x114>)
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4413      	add	r3, r2
 8000f22:	889b      	ldrh	r3, [r3, #4]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f001 fcbb 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	757b      	strb	r3, [r7, #21]
				  if (value)
 8000f2e:	7d7b      	ldrb	r3, [r7, #21]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d03c      	beq.n	8000fae <Game+0xde>
				  {
					  Score_Player[Twizzer] += Score_Plate[plate];
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <Game+0x118>)
 8000f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f3c:	7dbb      	ldrb	r3, [r7, #22]
 8000f3e:	492b      	ldr	r1, [pc, #172]	; (8000fec <Game+0x11c>)
 8000f40:	5ccb      	ldrb	r3, [r1, r3]
 8000f42:	4619      	mov	r1, r3
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	440a      	add	r2, r1
 8000f48:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <Game+0x118>)
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					  if(Score_Plate[plate])
 8000f4e:	7dbb      	ldrb	r3, [r7, #22]
 8000f50:	4a26      	ldr	r2, [pc, #152]	; (8000fec <Game+0x11c>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <Game+0xa2>
					  {
						  PlatesCounter++;
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <Game+0x120>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <Game+0x120>)
 8000f62:	701a      	strb	r2, [r3, #0]
						  if (PlatesCounter >=13)
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <Game+0x120>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b0c      	cmp	r3, #12
 8000f6a:	d902      	bls.n	8000f72 <Game+0xa2>
						  {
							  End_Game();
 8000f6c:	f7ff fbcc 	bl	8000708 <End_Game>
							  break;
 8000f70:	e023      	b.n	8000fba <Game+0xea>
						  }
					  }
					  Score_Plate[plate]=0;
 8000f72:	7dbb      	ldrb	r3, [r7, #22]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Game+0x11c>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	54d1      	strb	r1, [r2, r3]

					  if (State == Timeout)
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <Game+0x124>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d102      	bne.n	8000f88 <Game+0xb8>
					  {
						  End_Game();
 8000f82:	f7ff fbc1 	bl	8000708 <End_Game>
						  break;
 8000f86:	e018      	b.n	8000fba <Game+0xea>
					  }

					  /* Converting integer to string using sprintf	*/
					  sprintf(str, "%d", Score_Player[Twizzer]);
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <Game+0x118>)
 8000f8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4918      	ldr	r1, [pc, #96]	; (8000ff8 <Game+0x128>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f005 fc6a 	bl	8006870 <siprintf>

					  str[5]='\0';
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	747b      	strb	r3, [r7, #17]

					  print_OLED(Twizzer, str);
 8000fa0:	f107 020c 	add.w	r2, r7, #12
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa91 	bl	80004d0 <print_OLED>
			  for(uint8_t plate=0;plate<13;plate++)
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75bb      	strb	r3, [r7, #22]
 8000fb4:	7dbb      	ldrb	r3, [r7, #22]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	d9ab      	bls.n	8000f12 <Game+0x42>


				  }
			  }
			  HAL_GPIO_WritePin(GPIOA, Twizzer_1_Pin|Twizzer_2_Pin|Twizzer_3_Pin|Twizzer_4_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2178      	movs	r1, #120	; 0x78
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <Game+0x10c>)
 8000fc0:	f001 fc85 	bl	80028ce <HAL_GPIO_WritePin>
		  for (uint8_t Twizzer =0;Twizzer<4;Twizzer++)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	75fb      	strb	r3, [r7, #23]
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d98c      	bls.n	8000eea <Game+0x1a>
		  }
	  }
    osDelay(200);
 8000fd0:	20c8      	movs	r0, #200	; 0xc8
 8000fd2:	f003 fcb9 	bl	8004948 <osDelay>
	  if(Start_Time >0)
 8000fd6:	e781      	b.n	8000edc <Game+0xc>
 8000fd8:	20000088 	.word	0x20000088
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	20000080 	.word	0x20000080
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20002218 	.word	0x20002218
 8000fec:	20000070 	.word	0x20000070
 8000ff0:	2000227c 	.word	0x2000227c
 8000ff4:	20000380 	.word	0x20000380
 8000ff8:	08007134 	.word	0x08007134

08000ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100e:	f000 fd77 	bl	8001b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command, unsigned char address)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af04      	add	r7, sp, #16
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
 8001032:	4613      	mov	r3, r2
 8001034:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(hi2c, address, 0x00, 1, &command, 1, 10);
 8001036:	78bb      	ldrb	r3, [r7, #2]
 8001038:	b299      	uxth	r1, r3
 800103a:	230a      	movs	r3, #10
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	1cfb      	adds	r3, r7, #3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	2200      	movs	r2, #0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f001 fd90 	bl	8002b70 <HAL_I2C_Mem_Write>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c,unsigned char address )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f000 fd65 	bl	8001b38 <HAL_Delay>
    int status = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE,address);   // Display off
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	461a      	mov	r2, r3
 8001076:	21ae      	movs	r1, #174	; 0xae
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ffd4 	bl	8001026 <ssd1306_WriteCommand>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20,address);   // Set Memory Addressing Mode
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	461a      	mov	r2, r3
 800108c:	2120      	movs	r1, #32
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffc9 	bl	8001026 <ssd1306_WriteCommand>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10,address);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	461a      	mov	r2, r3
 80010a2:	2110      	movs	r1, #16
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffbe 	bl	8001026 <ssd1306_WriteCommand>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0,address);   // Set Page Start Address for Page Addressing Mode,0-7
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	461a      	mov	r2, r3
 80010b8:	21b0      	movs	r1, #176	; 0xb0
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb3 	bl	8001026 <ssd1306_WriteCommand>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8,address);   // Set COM Output Scan Direction
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	461a      	mov	r2, r3
 80010ce:	21c8      	movs	r1, #200	; 0xc8
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffa8 	bl	8001026 <ssd1306_WriteCommand>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00,address);   // Set low column address
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	461a      	mov	r2, r3
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff9d 	bl	8001026 <ssd1306_WriteCommand>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10,address);   // Set high column address
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	461a      	mov	r2, r3
 80010fa:	2110      	movs	r1, #16
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff92 	bl	8001026 <ssd1306_WriteCommand>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40,address);   // Set start line address
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	461a      	mov	r2, r3
 8001110:	2140      	movs	r1, #64	; 0x40
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff87 	bl	8001026 <ssd1306_WriteCommand>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81,address);   // set contrast control register
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	461a      	mov	r2, r3
 8001126:	2181      	movs	r1, #129	; 0x81
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff7c 	bl	8001026 <ssd1306_WriteCommand>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF,address);
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	461a      	mov	r2, r3
 800113c:	21ff      	movs	r1, #255	; 0xff
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff71 	bl	8001026 <ssd1306_WriteCommand>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1,address);   // Set segment re-map 0 to 127
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	461a      	mov	r2, r3
 8001152:	21a1      	movs	r1, #161	; 0xa1
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff66 	bl	8001026 <ssd1306_WriteCommand>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6,address);   // Set normal display
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	461a      	mov	r2, r3
 8001168:	21a6      	movs	r1, #166	; 0xa6
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff5b 	bl	8001026 <ssd1306_WriteCommand>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8,address);   // Set multiplex ratio(1 to 64)
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	461a      	mov	r2, r3
 800117e:	21a8      	movs	r1, #168	; 0xa8
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff50 	bl	8001026 <ssd1306_WriteCommand>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1,address);
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	461a      	mov	r2, r3
 8001194:	213f      	movs	r1, #63	; 0x3f
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff45 	bl	8001026 <ssd1306_WriteCommand>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4,address);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	461a      	mov	r2, r3
 80011aa:	21a4      	movs	r1, #164	; 0xa4
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff3a 	bl	8001026 <ssd1306_WriteCommand>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4413      	add	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3,address);   // Set display offset
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	461a      	mov	r2, r3
 80011c0:	21d3      	movs	r1, #211	; 0xd3
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff2f 	bl	8001026 <ssd1306_WriteCommand>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00,address);   // No offset
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	461a      	mov	r2, r3
 80011d6:	2100      	movs	r1, #0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff24 	bl	8001026 <ssd1306_WriteCommand>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5,address);   // Set display clock divide ratio/oscillator frequency
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	461a      	mov	r2, r3
 80011ec:	21d5      	movs	r1, #213	; 0xd5
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff19 	bl	8001026 <ssd1306_WriteCommand>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0,address);   // Set divide ratio
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	461a      	mov	r2, r3
 8001202:	21f0      	movs	r1, #240	; 0xf0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff0e 	bl	8001026 <ssd1306_WriteCommand>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9,address);   // Set pre-charge period
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	461a      	mov	r2, r3
 8001218:	21d9      	movs	r1, #217	; 0xd9
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff03 	bl	8001026 <ssd1306_WriteCommand>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22,address);
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	461a      	mov	r2, r3
 800122e:	2122      	movs	r1, #34	; 0x22
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fef8 	bl	8001026 <ssd1306_WriteCommand>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA,address);   // Set com pins hardware configuration
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	461a      	mov	r2, r3
 8001244:	21da      	movs	r1, #218	; 0xda
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff feed 	bl	8001026 <ssd1306_WriteCommand>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02,address);
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	461a      	mov	r2, r3
 800125a:	2112      	movs	r1, #18
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fee2 	bl	8001026 <ssd1306_WriteCommand>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB,address);   // Set vcomh
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	461a      	mov	r2, r3
 8001270:	21db      	movs	r1, #219	; 0xdb
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fed7 	bl	8001026 <ssd1306_WriteCommand>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20,address);   // 0x20,0.77xVcc
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	461a      	mov	r2, r3
 8001286:	2120      	movs	r1, #32
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fecc 	bl	8001026 <ssd1306_WriteCommand>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D,address);   // Set DC-DC enable
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	461a      	mov	r2, r3
 800129c:	218d      	movs	r1, #141	; 0x8d
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fec1 	bl	8001026 <ssd1306_WriteCommand>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14,address);   //
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	461a      	mov	r2, r3
 80012b2:	2114      	movs	r1, #20
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff feb6 	bl	8001026 <ssd1306_WriteCommand>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF,address);   // Turn on SSD1306 panel
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	461a      	mov	r2, r3
 80012c8:	21af      	movs	r1, #175	; 0xaf
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff feab 	bl	8001026 <ssd1306_WriteCommand>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <ssd1306_Init+0x288>
        return 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e011      	b.n	8001308 <ssd1306_Init+0x2ac>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f000 f815 	bl	8001314 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c,address);
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f832 	bl	8001358 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <ssd1306_Init+0x2b4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <ssd1306_Init+0x2b4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <ssd1306_Init+0x2b4>)
 8001302:	2201      	movs	r2, #1
 8001304:	715a      	strb	r2, [r3, #5]

    return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000784 	.word	0x20000784

08001314 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e00d      	b.n	8001340 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <ssd1306_Fill+0x1a>
 800132a:	2100      	movs	r1, #0
 800132c:	e000      	b.n	8001330 <ssd1306_Fill+0x1c>
 800132e:	21ff      	movs	r1, #255	; 0xff
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <ssd1306_Fill+0x40>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	460a      	mov	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001346:	d3ed      	bcc.n	8001324 <ssd1306_Fill+0x10>
    }
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000384 	.word	0x20000384

08001358 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c, unsigned char address)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af04      	add	r7, sp, #16
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e026      	b.n	80013b8 <ssd1306_UpdateScreen+0x60>
        ssd1306_WriteCommand(hi2c, 0xB0 + i,address);
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	3b50      	subs	r3, #80	; 0x50
 800136e:	b2db      	uxtb	r3, r3
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fe56 	bl	8001026 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00,address);
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	461a      	mov	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fe50 	bl	8001026 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10,address);
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	461a      	mov	r2, r3
 800138a:	2110      	movs	r1, #16
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fe4a 	bl	8001026 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, address, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	b299      	uxth	r1, r3
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	01db      	lsls	r3, r3, #7
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <ssd1306_UpdateScreen+0x70>)
 800139c:	4413      	add	r3, r2
 800139e:	2264      	movs	r2, #100	; 0x64
 80013a0:	9202      	str	r2, [sp, #8]
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	9201      	str	r2, [sp, #4]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	2240      	movs	r2, #64	; 0x40
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f001 fbdf 	bl	8002b70 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b07      	cmp	r3, #7
 80013bc:	d9d5      	bls.n	800136a <ssd1306_UpdateScreen+0x12>
    }
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000384 	.word	0x20000384

080013cc <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	460b      	mov	r3, r1
 80013d8:	71bb      	strb	r3, [r7, #6]
 80013da:	4613      	mov	r3, r2
 80013dc:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db48      	blt.n	8001478 <ssd1306_DrawPixel+0xac>
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	2b3f      	cmp	r3, #63	; 0x3f
 80013ea:	d845      	bhi.n	8001478 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <ssd1306_DrawPixel+0xb8>)
 80013ee:	791b      	ldrb	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80013f4:	797b      	ldrb	r3, [r7, #5]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d11a      	bne.n	800143e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	b2d8      	uxtb	r0, r3
 8001410:	4603      	mov	r3, r0
 8001412:	01db      	lsls	r3, r3, #7
 8001414:	4413      	add	r3, r2
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <ssd1306_DrawPixel+0xbc>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	b25a      	sxtb	r2, r3
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b259      	sxtb	r1, r3
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	4603      	mov	r3, r0
 8001432:	01db      	lsls	r3, r3, #7
 8001434:	4413      	add	r3, r2
 8001436:	b2c9      	uxtb	r1, r1
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <ssd1306_DrawPixel+0xbc>)
 800143a:	54d1      	strb	r1, [r2, r3]
 800143c:	e01d      	b.n	800147a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	b2d8      	uxtb	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	01db      	lsls	r3, r3, #7
 800144a:	4413      	add	r3, r2
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <ssd1306_DrawPixel+0xbc>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	b25a      	sxtb	r2, r3
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	2101      	movs	r1, #1
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	b25b      	sxtb	r3, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	b25b      	sxtb	r3, r3
 8001464:	4013      	ands	r3, r2
 8001466:	b259      	sxtb	r1, r3
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	4603      	mov	r3, r0
 800146c:	01db      	lsls	r3, r3, #7
 800146e:	4413      	add	r3, r2
 8001470:	b2c9      	uxtb	r1, r1
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <ssd1306_DrawPixel+0xbc>)
 8001474:	54d1      	strb	r1, [r2, r3]
 8001476:	e000      	b.n	800147a <ssd1306_DrawPixel+0xae>
        return;
 8001478:	bf00      	nop
    }
}
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000784 	.word	0x20000784
 8001488:	20000384 	.word	0x20000384

0800148c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4604      	mov	r4, r0
 8001494:	1d38      	adds	r0, r7, #4
 8001496:	e880 0006 	stmia.w	r0, {r1, r2}
 800149a:	461a      	mov	r2, r3
 800149c:	4623      	mov	r3, r4
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	4613      	mov	r3, r2
 80014a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <ssd1306_WriteChar+0xfc>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	793b      	ldrb	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	2b7f      	cmp	r3, #127	; 0x7f
 80014b0:	dc06      	bgt.n	80014c0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80014b2:	4b35      	ldr	r3, [pc, #212]	; (8001588 <ssd1306_WriteChar+0xfc>)
 80014b4:	885b      	ldrh	r3, [r3, #2]
 80014b6:	461a      	mov	r2, r3
 80014b8:	797b      	ldrb	r3, [r7, #5]
 80014ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80014bc:	2b3f      	cmp	r3, #63	; 0x3f
 80014be:	dd01      	ble.n	80014c4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e05d      	b.n	8001580 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	e04c      	b.n	8001564 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3b20      	subs	r3, #32
 80014d0:	7979      	ldrb	r1, [r7, #5]
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	440b      	add	r3, r1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	e034      	b.n	8001554 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <ssd1306_WriteChar+0xfc>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b2d8      	uxtb	r0, r3
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <ssd1306_WriteChar+0xfc>)
 800150a:	885b      	ldrh	r3, [r3, #2]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b2db      	uxtb	r3, r3
 8001516:	7bba      	ldrb	r2, [r7, #14]
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff ff57 	bl	80013cc <ssd1306_DrawPixel>
 800151e:	e016      	b.n	800154e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <ssd1306_WriteChar+0xfc>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <ssd1306_WriteChar+0xfc>)
 8001530:	885b      	ldrh	r3, [r3, #2]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2d9      	uxtb	r1, r3
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf0c      	ite	eq
 8001542:	2301      	moveq	r3, #1
 8001544:	2300      	movne	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	f7ff ff3f 	bl	80013cc <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3301      	adds	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	793b      	ldrb	r3, [r7, #4]
 8001556:	461a      	mov	r2, r3
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	4293      	cmp	r3, r2
 800155c:	d3c5      	bcc.n	80014ea <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3301      	adds	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	461a      	mov	r2, r3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4293      	cmp	r3, r2
 800156c:	d3ad      	bcc.n	80014ca <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <ssd1306_WriteChar+0xfc>)
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	793b      	ldrb	r3, [r7, #4]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b03      	ldr	r3, [pc, #12]	; (8001588 <ssd1306_WriteChar+0xfc>)
 800157c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3724      	adds	r7, #36	; 0x24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	20000784 	.word	0x20000784

0800158c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	1d38      	adds	r0, r7, #4
 8001596:	e880 0006 	stmia.w	r0, {r1, r2}
 800159a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800159c:	e012      	b.n	80015c4 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	7818      	ldrb	r0, [r3, #0]
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	1d3a      	adds	r2, r7, #4
 80015a6:	ca06      	ldmia	r2, {r1, r2}
 80015a8:	f7ff ff70 	bl	800148c <ssd1306_WriteChar>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d002      	beq.n	80015be <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	e008      	b.n	80015d0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
    while (*str)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e8      	bne.n	800159e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <ssd1306_SetCursor+0x2c>)
 80015ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <ssd1306_SetCursor+0x2c>)
 80015f6:	805a      	strh	r2, [r3, #2]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000784 	.word	0x20000784

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_MspInit+0x5c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_MspInit+0x5c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x60>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x60>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_ADC_MspInit+0x6c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d121      	bne.n	80016d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_ADC_MspInit+0x70>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_ADC_MspInit+0x70>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_ADC_MspInit+0x70>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_ADC_MspInit+0x70>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_ADC_MspInit+0x70>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_ADC_MspInit+0x70>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = Slide_Pot_Pin;
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c0:	2303      	movs	r3, #3
 80016c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Slide_Pot_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_ADC_MspInit+0x74>)
 80016cc:	f000 ff8e 	bl	80025ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40012400 	.word	0x40012400
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800

080016e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <HAL_I2C_MspInit+0xe4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d133      	bne.n	800176c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b31      	ldr	r3, [pc, #196]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a30      	ldr	r2, [pc, #192]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800171c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001722:	2312      	movs	r3, #18
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4827      	ldr	r0, [pc, #156]	; (80017d0 <HAL_I2C_MspInit+0xec>)
 8001732:	f000 ff5b 	bl	80025ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_I2C_MspInit+0xf0>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174c:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_I2C_MspInit+0xf0>)
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800176a:	e029      	b.n	80017c0 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_I2C_MspInit+0xf4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d124      	bne.n	80017c0 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800178e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <HAL_I2C_MspInit+0xec>)
 80017a4:	f000 ff22 	bl	80025ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 80017ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b2:	61d3      	str	r3, [r2, #28]
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_I2C_MspInit+0xe8>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40005800 	.word	0x40005800

080017dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_TIM_Base_MspInit+0x44>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d113      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_TIM_Base_MspInit+0x48>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_TIM_Base_MspInit+0x48>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x48>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	201d      	movs	r0, #29
 800180c:	f000 fec3 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001810:	201d      	movs	r0, #29
 8001812:	f000 fedc 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40000400 	.word	0x40000400
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <HAL_UART_MspInit+0x8c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d131      	bne.n	80018ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_UART_MspInit+0x90>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_UART_MspInit+0x90>)
 800184e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_UART_MspInit+0x90>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_UART_MspInit+0x90>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_UART_MspInit+0x90>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_UART_MspInit+0x90>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = MP3_Tx_Pin;
 8001878:	2340      	movs	r3, #64	; 0x40
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187c:	2312      	movs	r3, #18
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MP3_Tx_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <HAL_UART_MspInit+0x94>)
 800188c:	f000 feae 	bl	80025ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_UART_MspInit+0x98>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_UART_MspInit+0x98>)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40010000 	.word	0x40010000

080018c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	201c      	movs	r0, #28
 80018da:	f000 fe5c 	bl	8002596 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018de:	201c      	movs	r0, #28
 80018e0:	f000 fe75 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_InitTick+0xa0>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <HAL_InitTick+0xa0>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	61d3      	str	r3, [r2, #28]
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_InitTick+0xa0>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018fc:	f107 0210 	add.w	r2, r7, #16
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f002 f846 	bl	8003998 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800190c:	f002 f81c 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8001910:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_InitTick+0xa4>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	3b01      	subs	r3, #1
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0xa8>)
 8001922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_InitTick+0xa8>)
 800192a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800192e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_InitTick+0xa8>)
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_InitTick+0xa8>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_InitTick+0xa8>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001942:	480a      	ldr	r0, [pc, #40]	; (800196c <HAL_InitTick+0xa8>)
 8001944:	f002 f9e8 	bl	8003d18 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d104      	bne.n	8001958 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <HAL_InitTick+0xa8>)
 8001950:	f002 fa32 	bl	8003db8 <HAL_TIM_Base_Start_IT>
 8001954:	4603      	mov	r3, r0
 8001956:	e000      	b.n	800195a <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	3730      	adds	r7, #48	; 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	431bde83 	.word	0x431bde83
 800196c:	20002284 	.word	0x20002284

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <HardFault_Handler+0x4>

08001982 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <MemManage_Handler+0x4>

08001988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <BusFault_Handler+0x4>

0800198e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <UsageFault_Handler+0x4>

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM2_IRQHandler+0x10>)
 80019a6:	f002 fa59 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20002284 	.word	0x20002284

080019b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(Start_Time > 0 && State!=Interrupted)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <TIM3_IRQHandler+0x50>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <TIM3_IRQHandler+0x28>
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <TIM3_IRQHandler+0x54>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d009      	beq.n	80019dc <TIM3_IRQHandler+0x28>
	{
		Start_Time--;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <TIM3_IRQHandler+0x50>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <TIM3_IRQHandler+0x50>)
 80019d2:	701a      	strb	r2, [r3, #0]
		State=Waiting;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <TIM3_IRQHandler+0x54>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e00d      	b.n	80019f8 <TIM3_IRQHandler+0x44>
	}
	else if(Start_Time == 0)
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <TIM3_IRQHandler+0x50>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d106      	bne.n	80019f2 <TIM3_IRQHandler+0x3e>
	{
		State=Timeout;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <TIM3_IRQHandler+0x54>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
		Start_Time=-1;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <TIM3_IRQHandler+0x50>)
 80019ec:	22ff      	movs	r2, #255	; 0xff
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e002      	b.n	80019f8 <TIM3_IRQHandler+0x44>
	}
	else
	{
		Start_Time = -1;
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <TIM3_IRQHandler+0x50>)
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <TIM3_IRQHandler+0x58>)
 80019fa:	f002 fa2f 	bl	8003e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000088 	.word	0x20000088
 8001a08:	20000380 	.word	0x20000380
 8001a0c:	200021a0 	.word	0x200021a0

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f004 fed8 	bl	80067f4 <__errno>
 8001a44:	4602      	mov	r2, r0
 8001a46:	230c      	movs	r3, #12
 8001a48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20005000 	.word	0x20005000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	2000078c 	.word	0x2000078c
 8001a78:	200022d8 	.word	0x200022d8

08001a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	; (8001acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aae:	f7ff ffe5 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f004 fea5 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7fe fec7 	bl	8000848 <main>
  bx lr
 8001aba:	4770      	bx	lr
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001ac4:	08007fc8 	.word	0x08007fc8
  ldr r2, =_sbss
 8001ac8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001acc:	200022d4 	.word	0x200022d4

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x28>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 fd4b 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff feea 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fd8a 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_IncTick+0x1c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_IncTick+0x20>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_IncTick+0x20>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	200000a4 	.word	0x200000a4
 8001b20:	200022cc 	.word	0x200022cc

08001b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <HAL_GetTick+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	200022cc 	.word	0x200022cc

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_Delay+0x40>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffe0 	bl	8001b24 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200000a4 	.word	0x200000a4

08001b7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0be      	b.n	8001d1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fd56 	bl	800166c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fbf1 	bl	80023a8 <ADC_ConversionStop_Disable>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 8099 	bne.w	8001d0a <HAL_ADC_Init+0x18e>
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 8095 	bne.w	8001d0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001be8:	f023 0302 	bic.w	r3, r3, #2
 8001bec:	f043 0202 	orr.w	r2, r3, #2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7b1b      	ldrb	r3, [r3, #12]
 8001c02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c14:	d003      	beq.n	8001c1e <HAL_ADC_Init+0xa2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_ADC_Init+0xa8>
 8001c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_Init+0xaa>
 8001c24:	2300      	movs	r3, #0
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7d1b      	ldrb	r3, [r3, #20]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d119      	bne.n	8001c68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7b1b      	ldrb	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	035a      	lsls	r2, r3, #13
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	e00b      	b.n	8001c68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_ADC_Init+0x1a8>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c98:	d003      	beq.n	8001ca2 <HAL_ADC_Init+0x126>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d104      	bne.n	8001cac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	051b      	lsls	r3, r3, #20
 8001caa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_ADC_Init+0x1ac>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d10b      	bne.n	8001ce8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ce6:	e018      	b.n	8001d1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f023 0312 	bic.w	r3, r3, #18
 8001cf0:	f043 0210 	orr.w	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d08:	e007      	b.n	8001d1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	ffe1f7fd 	.word	0xffe1f7fd
 8001d28:	ff1f0efe 	.word	0xff1f0efe

08001d2c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Start+0x1a>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e098      	b.n	8001e78 <HAL_ADC_Start+0x14c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fad0 	bl	80022f4 <ADC_Enable>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8087 	bne.w	8001e6e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a41      	ldr	r2, [pc, #260]	; (8001e80 <HAL_ADC_Start+0x154>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d105      	bne.n	8001d8a <HAL_ADC_Start+0x5e>
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_ADC_Start+0x158>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d026      	beq.n	8001df2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001db4:	e01d      	b.n	8001df2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_ADC_Start+0x158>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_Start+0xaa>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_ADC_Start+0x154>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10d      	bne.n	8001df2 <HAL_ADC_Start+0xc6>
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_ADC_Start+0x158>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f023 0206 	bic.w	r2, r3, #6
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e0a:	e002      	b.n	8001e12 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f06f 0202 	mvn.w	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e32:	d113      	bne.n	8001e5c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_ADC_Start+0x154>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_ADC_Start+0x158>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d108      	bne.n	8001e5c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	e00c      	b.n	8001e76 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e003      	b.n	8001e76 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40012800 	.word	0x40012800
 8001e84:	40012400 	.word	0x40012400

08001e88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Stop+0x1a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e01a      	b.n	8001ed8 <HAL_ADC_Stop+0x50>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa7c 	bl	80023a8 <ADC_ConversionStop_Disable>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ef6:	f7ff fe15 	bl	8001b24 <HAL_GetTick>
 8001efa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f043 0220 	orr.w	r2, r3, #32
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0d3      	b.n	80020ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d131      	bne.n	8001f94 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d12a      	bne.n	8001f94 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f3e:	e021      	b.n	8001f84 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d01d      	beq.n	8001f84 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x7e>
 8001f4e:	f7ff fde9 	bl	8001b24 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d212      	bcs.n	8001f84 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0a2      	b.n	80020ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0d6      	beq.n	8001f40 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f92:	e070      	b.n	8002076 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_ADC_PollForConversion+0x1f4>)
 8001f96:	681c      	ldr	r4, [r3, #0]
 8001f98:	2002      	movs	r0, #2
 8001f9a:	f001 fe01 	bl	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	4b4b      	ldr	r3, [pc, #300]	; (80020d8 <HAL_ADC_PollForConversion+0x1f8>)
 8001fac:	400b      	ands	r3, r1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x104>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68d9      	ldr	r1, [r3, #12]
 8001fb8:	4b48      	ldr	r3, [pc, #288]	; (80020dc <HAL_ADC_PollForConversion+0x1fc>)
 8001fba:	400b      	ands	r3, r1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d111      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x104>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6919      	ldr	r1, [r3, #16]
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_ADC_PollForConversion+0x200>)
 8001fc8:	400b      	ands	r3, r1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x100>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_ADC_PollForConversion+0x204>)
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x100>
 8001fdc:	2314      	movs	r3, #20
 8001fde:	e020      	b.n	8002022 <HAL_ADC_PollForConversion+0x142>
 8001fe0:	2329      	movs	r3, #41	; 0x29
 8001fe2:	e01e      	b.n	8002022 <HAL_ADC_PollForConversion+0x142>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_ADC_PollForConversion+0x200>)
 8001fec:	400b      	ands	r3, r1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_ADC_PollForConversion+0x120>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68d9      	ldr	r1, [r3, #12]
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_ADC_PollForConversion+0x204>)
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <HAL_ADC_PollForConversion+0x13c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_ADC_PollForConversion+0x208>)
 8002008:	400b      	ands	r3, r1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d108      	bne.n	8002020 <HAL_ADC_PollForConversion+0x140>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68d9      	ldr	r1, [r3, #12]
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_ADC_PollForConversion+0x208>)
 8002016:	400b      	ands	r3, r1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_PollForConversion+0x140>
 800201c:	2354      	movs	r3, #84	; 0x54
 800201e:	e000      	b.n	8002022 <HAL_ADC_PollForConversion+0x142>
 8002020:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002028:	e021      	b.n	800206e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d01a      	beq.n	8002068 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_ADC_PollForConversion+0x168>
 8002038:	f7ff fd74 	bl	8001b24 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d20f      	bcs.n	8002068 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d90b      	bls.n	8002068 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f043 0204 	orr.w	r2, r3, #4
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e030      	b.n	80020ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	429a      	cmp	r2, r3
 8002074:	d8d9      	bhi.n	800202a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0212 	mvn.w	r2, #18
 800207e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002096:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800209a:	d115      	bne.n	80020c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000009c 	.word	0x2000009c
 80020d8:	24924924 	.word	0x24924924
 80020dc:	00924924 	.word	0x00924924
 80020e0:	12492492 	.word	0x12492492
 80020e4:	00492492 	.word	0x00492492
 80020e8:	00249249 	.word	0x00249249

080020ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x20>
 8002120:	2302      	movs	r3, #2
 8002122:	e0dc      	b.n	80022de <HAL_ADC_ConfigChannel+0x1da>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d81c      	bhi.n	800216e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b05      	subs	r3, #5
 8002146:	221f      	movs	r2, #31
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	4019      	ands	r1, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3b05      	subs	r3, #5
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	635a      	str	r2, [r3, #52]	; 0x34
 800216c:	e03c      	b.n	80021e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d81c      	bhi.n	80021b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b23      	subs	r3, #35	; 0x23
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	4019      	ands	r1, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b23      	subs	r3, #35	; 0x23
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
 80021ae:	e01b      	b.n	80021e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b41      	subs	r3, #65	; 0x41
 80021c2:	221f      	movs	r2, #31
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4019      	ands	r1, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b41      	subs	r3, #65	; 0x41
 80021dc:	fa00 f203 	lsl.w	r2, r0, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b09      	cmp	r3, #9
 80021ee:	d91c      	bls.n	800222a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68d9      	ldr	r1, [r3, #12]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	3b1e      	subs	r3, #30
 8002202:	2207      	movs	r2, #7
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	4019      	ands	r1, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6898      	ldr	r0, [r3, #8]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	3b1e      	subs	r3, #30
 800221c:	fa00 f203 	lsl.w	r2, r0, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	e019      	b.n	800225e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6919      	ldr	r1, [r3, #16]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	4019      	ands	r1, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6898      	ldr	r0, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b10      	cmp	r3, #16
 8002264:	d003      	beq.n	800226e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800226a:	2b11      	cmp	r3, #17
 800226c:	d132      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d125      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d126      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002294:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b10      	cmp	r3, #16
 800229c:	d11a      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_ADC_ConfigChannel+0x1e8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9a      	lsrs	r2, r3, #18
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x1b2>
 80022c2:	e007      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012400 	.word	0x40012400
 80022ec:	2000009c 	.word	0x2000009c
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d040      	beq.n	8002394 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <ADC_Enable+0xac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <ADC_Enable+0xb0>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002330:	e002      	b.n	8002338 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f9      	bne.n	8002332 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800233e:	f7ff fbf1 	bl	8001b24 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002344:	e01f      	b.n	8002386 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002346:	f7ff fbed 	bl	8001b24 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d918      	bls.n	8002386 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d011      	beq.n	8002386 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f043 0210 	orr.w	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e007      	b.n	8002396 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d1d8      	bne.n	8002346 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000009c 	.word	0x2000009c
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d12e      	bne.n	8002420 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023d2:	f7ff fba7 	bl	8001b24 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023d8:	e01b      	b.n	8002412 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023da:	f7ff fba3 	bl	8001b24 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d914      	bls.n	8002412 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10d      	bne.n	8002412 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e007      	b.n	8002422 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d0dc      	beq.n	80023da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__NVIC_EnableIRQ+0x34>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff4f 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff64 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ffb2 	bl	800251c <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff81 	bl	80024c8 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff57 	bl	8002490 <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b08b      	sub	sp, #44	; 0x2c
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fe:	e127      	b.n	8002850 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002600:	2201      	movs	r2, #1
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8116 	bne.w	800284a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b12      	cmp	r3, #18
 8002624:	d034      	beq.n	8002690 <HAL_GPIO_Init+0xa4>
 8002626:	2b12      	cmp	r3, #18
 8002628:	d80d      	bhi.n	8002646 <HAL_GPIO_Init+0x5a>
 800262a:	2b02      	cmp	r3, #2
 800262c:	d02b      	beq.n	8002686 <HAL_GPIO_Init+0x9a>
 800262e:	2b02      	cmp	r3, #2
 8002630:	d804      	bhi.n	800263c <HAL_GPIO_Init+0x50>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d031      	beq.n	800269a <HAL_GPIO_Init+0xae>
 8002636:	2b01      	cmp	r3, #1
 8002638:	d01c      	beq.n	8002674 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800263a:	e048      	b.n	80026ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800263c:	2b03      	cmp	r3, #3
 800263e:	d043      	beq.n	80026c8 <HAL_GPIO_Init+0xdc>
 8002640:	2b11      	cmp	r3, #17
 8002642:	d01b      	beq.n	800267c <HAL_GPIO_Init+0x90>
          break;
 8002644:	e043      	b.n	80026ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002646:	4a89      	ldr	r2, [pc, #548]	; (800286c <HAL_GPIO_Init+0x280>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d026      	beq.n	800269a <HAL_GPIO_Init+0xae>
 800264c:	4a87      	ldr	r2, [pc, #540]	; (800286c <HAL_GPIO_Init+0x280>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d806      	bhi.n	8002660 <HAL_GPIO_Init+0x74>
 8002652:	4a87      	ldr	r2, [pc, #540]	; (8002870 <HAL_GPIO_Init+0x284>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d020      	beq.n	800269a <HAL_GPIO_Init+0xae>
 8002658:	4a86      	ldr	r2, [pc, #536]	; (8002874 <HAL_GPIO_Init+0x288>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01d      	beq.n	800269a <HAL_GPIO_Init+0xae>
          break;
 800265e:	e036      	b.n	80026ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002660:	4a85      	ldr	r2, [pc, #532]	; (8002878 <HAL_GPIO_Init+0x28c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d019      	beq.n	800269a <HAL_GPIO_Init+0xae>
 8002666:	4a85      	ldr	r2, [pc, #532]	; (800287c <HAL_GPIO_Init+0x290>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d016      	beq.n	800269a <HAL_GPIO_Init+0xae>
 800266c:	4a84      	ldr	r2, [pc, #528]	; (8002880 <HAL_GPIO_Init+0x294>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0xae>
          break;
 8002672:	e02c      	b.n	80026ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e028      	b.n	80026ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	623b      	str	r3, [r7, #32]
          break;
 8002684:	e023      	b.n	80026ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	3308      	adds	r3, #8
 800268c:	623b      	str	r3, [r7, #32]
          break;
 800268e:	e01e      	b.n	80026ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	330c      	adds	r3, #12
 8002696:	623b      	str	r3, [r7, #32]
          break;
 8002698:	e019      	b.n	80026ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026a2:	2304      	movs	r3, #4
 80026a4:	623b      	str	r3, [r7, #32]
          break;
 80026a6:	e012      	b.n	80026ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b0:	2308      	movs	r3, #8
 80026b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	611a      	str	r2, [r3, #16]
          break;
 80026ba:	e008      	b.n	80026ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026bc:	2308      	movs	r3, #8
 80026be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	615a      	str	r2, [r3, #20]
          break;
 80026c6:	e002      	b.n	80026ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
          break;
 80026cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2bff      	cmp	r3, #255	; 0xff
 80026d2:	d801      	bhi.n	80026d8 <HAL_GPIO_Init+0xec>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	e001      	b.n	80026dc <HAL_GPIO_Init+0xf0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2bff      	cmp	r3, #255	; 0xff
 80026e2:	d802      	bhi.n	80026ea <HAL_GPIO_Init+0xfe>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x104>
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	3b08      	subs	r3, #8
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	210f      	movs	r1, #15
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	401a      	ands	r2, r3
 8002702:	6a39      	ldr	r1, [r7, #32]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8096 	beq.w	800284a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800271e:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_GPIO_Init+0x298>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_GPIO_Init+0x298>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6193      	str	r3, [r2, #24]
 800272a:	4b56      	ldr	r3, [pc, #344]	; (8002884 <HAL_GPIO_Init+0x298>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002736:	4a54      	ldr	r2, [pc, #336]	; (8002888 <HAL_GPIO_Init+0x29c>)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_GPIO_Init+0x2a0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x19e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <HAL_GPIO_Init+0x2a4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x19a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a49      	ldr	r2, [pc, #292]	; (8002894 <HAL_GPIO_Init+0x2a8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x196>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a48      	ldr	r2, [pc, #288]	; (8002898 <HAL_GPIO_Init+0x2ac>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x192>
 800277a:	2303      	movs	r3, #3
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x1a0>
 800277e:	2304      	movs	r3, #4
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x1a0>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x1a0>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x1a0>
 800278a:	2300      	movs	r3, #0
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800279c:	493a      	ldr	r1, [pc, #232]	; (8002888 <HAL_GPIO_Init+0x29c>)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4938      	ldr	r1, [pc, #224]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
 80027c2:	e006      	b.n	80027d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	4933      	ldr	r1, [pc, #204]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d006      	beq.n	80027ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027de:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	492e      	ldr	r1, [pc, #184]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e006      	b.n	80027fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	4929      	ldr	r1, [pc, #164]	; (800289c <HAL_GPIO_Init+0x2b0>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_GPIO_Init+0x2b0>)
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	4924      	ldr	r1, [pc, #144]	; (800289c <HAL_GPIO_Init+0x2b0>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
 8002812:	e006      	b.n	8002822 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_GPIO_Init+0x2b0>)
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	491f      	ldr	r1, [pc, #124]	; (800289c <HAL_GPIO_Init+0x2b0>)
 800281e:	4013      	ands	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_GPIO_Init+0x2b0>)
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	491a      	ldr	r1, [pc, #104]	; (800289c <HAL_GPIO_Init+0x2b0>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]
 800283a:	e006      	b.n	800284a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_GPIO_Init+0x2b0>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	43db      	mvns	r3, r3
 8002844:	4915      	ldr	r1, [pc, #84]	; (800289c <HAL_GPIO_Init+0x2b0>)
 8002846:	4013      	ands	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3301      	adds	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	f47f aed0 	bne.w	8002600 <HAL_GPIO_Init+0x14>
  }
}
 8002860:	bf00      	nop
 8002862:	372c      	adds	r7, #44	; 0x2c
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	10210000 	.word	0x10210000
 8002870:	10110000 	.word	0x10110000
 8002874:	10120000 	.word	0x10120000
 8002878:	10310000 	.word	0x10310000
 800287c:	10320000 	.word	0x10320000
 8002880:	10220000 	.word	0x10220000
 8002884:	40021000 	.word	0x40021000
 8002888:	40010000 	.word	0x40010000
 800288c:	40010800 	.word	0x40010800
 8002890:	40010c00 	.word	0x40010c00
 8002894:	40011000 	.word	0x40011000
 8002898:	40011400 	.word	0x40011400
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
 80028da:	4613      	mov	r3, r2
 80028dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028de:	787b      	ldrb	r3, [r7, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ea:	e003      	b.n	80028f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e11f      	b.n	8002b52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fedc 	bl	80016e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002964:	f000 fff0 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a7b      	ldr	r2, [pc, #492]	; (8002b5c <HAL_I2C_Init+0x25c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d807      	bhi.n	8002984 <HAL_I2C_Init+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a7a      	ldr	r2, [pc, #488]	; (8002b60 <HAL_I2C_Init+0x260>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e006      	b.n	8002992 <HAL_I2C_Init+0x92>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a77      	ldr	r2, [pc, #476]	; (8002b64 <HAL_I2C_Init+0x264>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0db      	b.n	8002b52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_I2C_Init+0x268>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a64      	ldr	r2, [pc, #400]	; (8002b5c <HAL_I2C_Init+0x25c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d802      	bhi.n	80029d4 <HAL_I2C_Init+0xd4>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e009      	b.n	80029e8 <HAL_I2C_Init+0xe8>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a63      	ldr	r2, [pc, #396]	; (8002b6c <HAL_I2C_Init+0x26c>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4956      	ldr	r1, [pc, #344]	; (8002b5c <HAL_I2C_Init+0x25c>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d80d      	bhi.n	8002a24 <HAL_I2C_Init+0x124>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	bf38      	it	cc
 8002a20:	2304      	movcc	r3, #4
 8002a22:	e04f      	b.n	8002ac4 <HAL_I2C_Init+0x1c4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <HAL_I2C_Init+0x150>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_I2C_Init+0x176>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x17e>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e022      	b.n	8002ac4 <HAL_I2C_Init+0x1c4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_I2C_Init+0x1a4>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e58      	subs	r0, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	440b      	add	r3, r1
 8002a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	e00f      	b.n	8002ac4 <HAL_I2C_Init+0x1c4>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6911      	ldr	r1, [r2, #16]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	000186a0 	.word	0x000186a0
 8002b60:	001e847f 	.word	0x001e847f
 8002b64:	003d08ff 	.word	0x003d08ff
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	10624dd3 	.word	0x10624dd3

08002b70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b8a:	f7fe ffcb 	bl	8001b24 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 80d9 	bne.w	8002d50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2319      	movs	r3, #25
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	496d      	ldr	r1, [pc, #436]	; (8002d5c <HAL_I2C_Mem_Write+0x1ec>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f971 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0cc      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Mem_Write+0x56>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0c5      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d007      	beq.n	8002bec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a4d      	ldr	r2, [pc, #308]	; (8002d60 <HAL_I2C_Mem_Write+0x1f0>)
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c2e:	88f8      	ldrh	r0, [r7, #6]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f890 	bl	8002d64 <I2C_RequestMemoryWrite>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d052      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e081      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f9f2 	bl	800303c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d107      	bne.n	8002c76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1aa      	bne.n	8002c4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f9de 	bl	80030be <I2C_WaitOnBTFFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e016      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	00100002 	.word	0x00100002
 8002d60:	ffff0000 	.word	0xffff0000

08002d64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f878 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db4:	d103      	bne.n	8002dbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e05f      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	492d      	ldr	r1, [pc, #180]	; (8002e8c <I2C_RequestMemoryWrite+0x128>)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f8b0 	bl	8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e04c      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f91a 	bl	800303c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d107      	bne.n	8002e26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e02b      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	e021      	b.n	8002e80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	6a39      	ldr	r1, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f8f4 	bl	800303c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e005      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e76:	893b      	ldrh	r3, [r7, #8]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	00010002 	.word	0x00010002

08002e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea0:	e025      	b.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d021      	beq.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7fe fe3b 	bl	8001b24 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d116      	bne.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e023      	b.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d10d      	bne.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4013      	ands	r3, r2
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	e00c      	b.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d0b6      	beq.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f4c:	e051      	b.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d123      	bne.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f043 0204 	orr.w	r2, r3, #4
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e046      	b.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d021      	beq.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe fdb9 	bl	8001b24 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d116      	bne.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e020      	b.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10c      	bne.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	e00b      	b.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	43da      	mvns	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d18d      	bne.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003048:	e02d      	b.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f878 	bl	8003140 <I2C_IsAcknowledgeFailed>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e02d      	b.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d021      	beq.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7fe fd5f 	bl	8001b24 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d116      	bne.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e007      	b.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d1ca      	bne.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ca:	e02d      	b.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f837 	bl	8003140 <I2C_IsAcknowledgeFailed>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e02d      	b.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e2:	d021      	beq.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fe fd1e 	bl	8001b24 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e007      	b.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d1ca      	bne.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003156:	d11b      	bne.n	8003190 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003160:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e26c      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8087 	beq.w	80032ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031bc:	4b92      	ldr	r3, [pc, #584]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c8:	4b8f      	ldr	r3, [pc, #572]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d112      	bne.n	80031fa <HAL_RCC_OscConfig+0x5e>
 80031d4:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d10b      	bne.n	80031fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e2:	4b89      	ldr	r3, [pc, #548]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x12c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d168      	bne.n	80032c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e246      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x76>
 8003204:	4b80      	ldr	r3, [pc, #512]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a7f      	ldr	r2, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e02e      	b.n	8003270 <HAL_RCC_OscConfig+0xd4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x98>
 800321a:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7a      	ldr	r2, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a77      	ldr	r2, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xd4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0xbc>
 800323e:	4b72      	ldr	r3, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a71      	ldr	r2, [pc, #452]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b6f      	ldr	r3, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6e      	ldr	r2, [pc, #440]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xd4>
 8003258:	4b6b      	ldr	r3, [pc, #428]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6a      	ldr	r2, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b68      	ldr	r3, [pc, #416]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a67      	ldr	r2, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fc54 	bl	8001b24 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe fc50 	bl	8001b24 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1fa      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b5d      	ldr	r3, [pc, #372]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xe4>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fc40 	bl	8001b24 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe fc3c 	bl	8001b24 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1e6      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x10c>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d063      	beq.n	800339e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d6:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032e2:	4b49      	ldr	r3, [pc, #292]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x18c>
 80032ee:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x176>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1ba      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4939      	ldr	r1, [pc, #228]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e03a      	b.n	800339e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b36      	ldr	r3, [pc, #216]	; (800340c <HAL_RCC_OscConfig+0x270>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fe fbf5 	bl	8001b24 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe fbf1 	bl	8001b24 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e19b      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4927      	ldr	r1, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <HAL_RCC_OscConfig+0x270>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe fbd4 	bl	8001b24 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003380:	f7fe fbd0 	bl	8001b24 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e17a      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03a      	beq.n	8003420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d019      	beq.n	80033e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_RCC_OscConfig+0x274>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe fbb4 	bl	8001b24 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe fbb0 	bl	8001b24 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e15a      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033de:	2001      	movs	r0, #1
 80033e0:	f000 fb0a 	bl	80039f8 <RCC_Delay>
 80033e4:	e01c      	b.n	8003420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_RCC_OscConfig+0x274>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ec:	f7fe fb9a 	bl	8001b24 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f2:	e00f      	b.n	8003414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f4:	f7fe fb96 	bl	8001b24 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d908      	bls.n	8003414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e140      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	42420000 	.word	0x42420000
 8003410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	4b9e      	ldr	r3, [pc, #632]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e9      	bne.n	80033f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a6 	beq.w	800357a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003432:	4b97      	ldr	r3, [pc, #604]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	4b94      	ldr	r3, [pc, #592]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4a93      	ldr	r2, [pc, #588]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	61d3      	str	r3, [r2, #28]
 800344a:	4b91      	ldr	r3, [pc, #580]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b8e      	ldr	r3, [pc, #568]	; (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d118      	bne.n	8003498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b8b      	ldr	r3, [pc, #556]	; (8003694 <HAL_RCC_OscConfig+0x4f8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a8a      	ldr	r2, [pc, #552]	; (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe fb57 	bl	8001b24 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe fb53 	bl	8001b24 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b64      	cmp	r3, #100	; 0x64
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0fd      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	4b81      	ldr	r3, [pc, #516]	; (8003694 <HAL_RCC_OscConfig+0x4f8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x312>
 80034a0:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4a7a      	ldr	r2, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6213      	str	r3, [r2, #32]
 80034ac:	e02d      	b.n	800350a <HAL_RCC_OscConfig+0x36e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x334>
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a75      	ldr	r2, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a72      	ldr	r2, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	e01c      	b.n	800350a <HAL_RCC_OscConfig+0x36e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x356>
 80034d8:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a6c      	ldr	r2, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a69      	ldr	r2, [pc, #420]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	e00b      	b.n	800350a <HAL_RCC_OscConfig+0x36e>
 80034f2:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a66      	ldr	r2, [pc, #408]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	4b64      	ldr	r3, [pc, #400]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a63      	ldr	r2, [pc, #396]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d015      	beq.n	800353e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fe fb07 	bl	8001b24 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fb03 	bl	8001b24 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0ab      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ee      	beq.n	800351a <HAL_RCC_OscConfig+0x37e>
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe faf1 	bl	8001b24 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe faed 	bl	8001b24 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e095      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355c:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ee      	bne.n	8003546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b48      	ldr	r3, [pc, #288]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4a47      	ldr	r2, [pc, #284]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8081 	beq.w	8003686 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d061      	beq.n	8003654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d146      	bne.n	8003626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b3f      	ldr	r3, [pc, #252]	; (8003698 <HAL_RCC_OscConfig+0x4fc>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe fac1 	bl	8001b24 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe fabd 	bl	8001b24 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e067      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b8:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d108      	bne.n	80035e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	492d      	ldr	r1, [pc, #180]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a19      	ldr	r1, [r3, #32]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	430b      	orrs	r3, r1
 80035f2:	4927      	ldr	r1, [pc, #156]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f8:	4b27      	ldr	r3, [pc, #156]	; (8003698 <HAL_RCC_OscConfig+0x4fc>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fa91 	bl	8001b24 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fa8d 	bl	8001b24 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e037      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x46a>
 8003624:	e02f      	b.n	8003686 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_RCC_OscConfig+0x4fc>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fa7a 	bl	8001b24 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe fa76 	bl	8001b24 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e020      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x498>
 8003652:	e018      	b.n	8003686 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e013      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_OscConfig+0x4f4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	429a      	cmp	r2, r3
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	40007000 	.word	0x40007000
 8003698:	42420060 	.word	0x42420060

0800369c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0d0      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	4965      	ldr	r1, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800371a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d040      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d115      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e073      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4936      	ldr	r1, [pc, #216]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7fe f9ca 	bl	8001b24 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe f9c6 	bl	8001b24 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e053      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d210      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	4922      	ldr	r1, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4601      	mov	r1, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	fa21 f303 	lsr.w	r3, r1, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1cc>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1d0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe f83a 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	08007f74 	.word	0x08007f74
 8003868:	2000009c 	.word	0x2000009c
 800386c:	200000a0 	.word	0x200000a0

08003870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b490      	push	{r4, r7}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003878:	1d3c      	adds	r4, r7, #4
 800387a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800387c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	2300      	movs	r3, #0
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_RCC_GetSysClockFreq+0xb8>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x40>
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x46>
 80038ae:	e02d      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b2:	623b      	str	r3, [r7, #32]
      break;
 80038b4:	e02d      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	0c9b      	lsrs	r3, r3, #18
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038c2:	4413      	add	r3, r2
 80038c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0c5b      	lsrs	r3, r3, #17
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038e2:	4413      	add	r3, r2
 80038e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ee:	fb02 f203 	mul.w	r2, r2, r3
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e004      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	623b      	str	r3, [r7, #32]
      break;
 800390a:	e002      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_RCC_GetSysClockFreq+0xbc>)
 800390e:	623b      	str	r3, [r7, #32]
      break;
 8003910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003912:	6a3b      	ldr	r3, [r7, #32]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bc90      	pop	{r4, r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	080071e8 	.word	0x080071e8
 8003924:	080071f8 	.word	0x080071f8
 8003928:	40021000 	.word	0x40021000
 800392c:	007a1200 	.word	0x007a1200
 8003930:	003d0900 	.word	0x003d0900

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b02      	ldr	r3, [pc, #8]	; (8003944 <HAL_RCC_GetHCLKFreq+0x10>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	2000009c 	.word	0x2000009c

08003948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800394c:	f7ff fff2 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003950:	4601      	mov	r1, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4a03      	ldr	r2, [pc, #12]	; (800396c <HAL_RCC_GetPCLK1Freq+0x24>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08007f84 	.word	0x08007f84

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003974:	f7ff ffde 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003978:	4601      	mov	r1, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	0adb      	lsrs	r3, r3, #11
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4a03      	ldr	r2, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	fa21 f303 	lsr.w	r3, r1, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	08007f84 	.word	0x08007f84

08003998 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	220f      	movs	r2, #15
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_RCC_GetClockConfig+0x58>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_GetClockConfig+0x5c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0207 	and.w	r2, r3, #7
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40022000 	.word	0x40022000

080039f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <RCC_Delay+0x34>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <RCC_Delay+0x38>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0a5b      	lsrs	r3, r3, #9
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a14:	bf00      	nop
  }
  while (Delay --);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	60fa      	str	r2, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f9      	bne.n	8003a14 <RCC_Delay+0x1c>
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	2000009c 	.word	0x2000009c
 8003a30:	10624dd3 	.word	0x10624dd3

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d07d      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a50:	2300      	movs	r3, #0
 8003a52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a54:	4b4f      	ldr	r3, [pc, #316]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10d      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b4c      	ldr	r3, [pc, #304]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4a4b      	ldr	r2, [pc, #300]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	61d3      	str	r3, [r2, #28]
 8003a6c:	4b49      	ldr	r3, [pc, #292]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d118      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a42      	ldr	r2, [pc, #264]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a94:	f7fe f846 	bl	8001b24 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	e008      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9c:	f7fe f842 	bl	8001b24 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e06d      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02e      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d027      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ad8:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ae2:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae8:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aee:	4a29      	ldr	r2, [pc, #164]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d014      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe f811 	bl	8001b24 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe f80d 	bl	8001b24 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e036      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ee      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4917      	ldr	r1, [pc, #92]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	490b      	ldr	r1, [pc, #44]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4904      	ldr	r1, [pc, #16]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	42420440 	.word	0x42420440

08003ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b08d      	sub	sp, #52	; 0x34
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ba8:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003baa:	f107 040c 	add.w	r4, r7, #12
 8003bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bb4:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d07f      	beq.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d002      	beq.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d048      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003bdc:	e08b      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003be4:	4b48      	ldr	r3, [pc, #288]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d07f      	beq.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c02:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	0c5b      	lsrs	r3, r3, #17
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c2e:	4a37      	ldr	r2, [pc, #220]	; (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3e:	e004      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	4a33      	ldr	r2, [pc, #204]	; (8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c56:	d102      	bne.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c5c:	e048      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c6c:	e040      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7e:	d108      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c90:	e01f      	b.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003caa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb0:	e00f      	b.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cbc:	d11a      	bne.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d014      	beq.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003cca:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cd0:	e010      	b.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003cd2:	e00f      	b.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003cd4:	f7ff fe4c 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	0b9b      	lsrs	r3, r3, #14
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003cf4:	bf00      	nop
    }
  }
  return (frequency);
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3734      	adds	r7, #52	; 0x34
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	080071fc 	.word	0x080071fc
 8003d04:	0800720c 	.word	0x0800720c
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	007a1200 	.word	0x007a1200
 8003d10:	003d0900 	.word	0x003d0900
 8003d14:	aaaaaaab 	.word	0xaaaaaaab

08003d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e041      	b.n	8003dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd fd4c 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f000 fa64 	bl	8004224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e03a      	b.n	8003e46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_TIM_Base_Start_IT+0x98>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x58>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d009      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x58>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x58>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d111      	bne.n	8003e34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d010      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	e007      	b.n	8003e44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800

08003e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0202 	mvn.w	r2, #2
 8003e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9a4 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f997 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f9a6 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0204 	mvn.w	r2, #4
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f97a 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f96d 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f97c 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0208 	mvn.w	r2, #8
 8003f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2204      	movs	r2, #4
 8003f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f950 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f943 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f952 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d122      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0210 	mvn.w	r2, #16
 8003f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f926 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f919 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f928 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d107      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0201 	mvn.w	r2, #1
 8003fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd f80e 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b80      	cmp	r3, #128	; 0x80
 8003fec:	d10e      	bne.n	800400c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d107      	bne.n	800400c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa6b 	bl	80044e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d10e      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d107      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8ec 	bl	8004210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b20      	cmp	r3, #32
 8004044:	d10e      	bne.n	8004064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d107      	bne.n	8004064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0220 	mvn.w	r2, #32
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa36 	bl	80044d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIM_ConfigClockSource+0x18>
 8004080:	2302      	movs	r3, #2
 8004082:	e0a6      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x166>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d067      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x120>
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d80b      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x6c>
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d073      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x140>
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d802      	bhi.n	80040ce <HAL_TIM_ConfigClockSource+0x62>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d06f      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040cc:	e078      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d06c      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x140>
 80040d2:	2b30      	cmp	r3, #48	; 0x30
 80040d4:	d06a      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040d6:	e073      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040d8:	2b70      	cmp	r3, #112	; 0x70
 80040da:	d00d      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0x8c>
 80040dc:	2b70      	cmp	r3, #112	; 0x70
 80040de:	d804      	bhi.n	80040ea <HAL_TIM_ConfigClockSource+0x7e>
 80040e0:	2b50      	cmp	r3, #80	; 0x50
 80040e2:	d033      	beq.n	800414c <HAL_TIM_ConfigClockSource+0xe0>
 80040e4:	2b60      	cmp	r3, #96	; 0x60
 80040e6:	d041      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040e8:	e06a      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ee:	d066      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x152>
 80040f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f4:	d017      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040f6:	e063      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f000 f965 	bl	80043d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800411a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	609a      	str	r2, [r3, #8]
      break;
 8004124:	e04c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6899      	ldr	r1, [r3, #8]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f000 f94e 	bl	80043d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004148:	609a      	str	r2, [r3, #8]
      break;
 800414a:	e039      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	461a      	mov	r2, r3
 800415a:	f000 f8c5 	bl	80042e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2150      	movs	r1, #80	; 0x50
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f91c 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 800416a:	e029      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	461a      	mov	r2, r3
 800417a:	f000 f8e3 	bl	8004344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2160      	movs	r1, #96	; 0x60
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f90c 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 800418a:	e019      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	461a      	mov	r2, r3
 800419a:	f000 f8a5 	bl	80042e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2140      	movs	r1, #64	; 0x40
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f8fc 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 80041aa:	e009      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f000 f8f3 	bl	80043a2 <TIM_ITRx_SetConfig>
        break;
 80041bc:	e000      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
	...

08004224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <TIM_Base_SetConfig+0xb8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00b      	beq.n	8004254 <TIM_Base_SetConfig+0x30>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d007      	beq.n	8004254 <TIM_Base_SetConfig+0x30>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <TIM_Base_SetConfig+0xbc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_Base_SetConfig+0x30>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <TIM_Base_SetConfig+0xc0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d108      	bne.n	8004266 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <TIM_Base_SetConfig+0xb8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00b      	beq.n	8004286 <TIM_Base_SetConfig+0x62>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004274:	d007      	beq.n	8004286 <TIM_Base_SetConfig+0x62>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <TIM_Base_SetConfig+0xbc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <TIM_Base_SetConfig+0x62>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <TIM_Base_SetConfig+0xc0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d108      	bne.n	8004298 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a07      	ldr	r2, [pc, #28]	; (80042dc <TIM_Base_SetConfig+0xb8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d103      	bne.n	80042cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	615a      	str	r2, [r3, #20]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800

080042e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f023 030a 	bic.w	r3, r3, #10
 8004324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f023 0210 	bic.w	r2, r3, #16
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800436e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	031b      	lsls	r3, r3, #12
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004380:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f043 0307 	orr.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	021a      	lsls	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	609a      	str	r2, [r3, #8]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004428:	2302      	movs	r3, #2
 800442a:	e046      	b.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d009      	beq.n	800448e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a10      	ldr	r2, [pc, #64]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d10c      	bne.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4313      	orrs	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800

080044d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e047      	b.n	8004596 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd f984 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f90d 	bl	8004758 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800454c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800455c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0208 	orr.w	r2, r2, #8
 800456c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800457c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b08a      	sub	sp, #40	; 0x28
 80045a2:	af02      	add	r7, sp, #8
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d17c      	bne.n	80046b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_UART_Transmit+0x2c>
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e075      	b.n	80046ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Transmit+0x3e>
 80045d8:	2302      	movs	r3, #2
 80045da:	e06e      	b.n	80046ba <HAL_UART_Transmit+0x11c>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2221      	movs	r2, #33	; 0x21
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f2:	f7fd fa97 	bl	8001b24 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460c:	d108      	bne.n	8004620 <HAL_UART_Transmit+0x82>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e003      	b.n	8004628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004630:	e02a      	b.n	8004688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f840 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e036      	b.n	80046ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	3302      	adds	r3, #2
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e007      	b.n	800467a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1cf      	bne.n	8004632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f810 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	e02c      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d028      	beq.n	800472e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80046e2:	f7fd fa1f 	bl	8001b24 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d21d      	bcs.n	800472e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004700:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e00f      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	429a      	cmp	r2, r3
 800474a:	d0c3      	beq.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004792:	f023 030c 	bic.w	r3, r3, #12
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	430b      	orrs	r3, r1
 800479e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	; (800486c <UART_SetConfig+0x114>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047c0:	f7ff f8d6 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	e002      	b.n	80047ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047c8:	f7ff f8be 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 80047cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009a      	lsls	r2, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	4a22      	ldr	r2, [pc, #136]	; (8004870 <UART_SetConfig+0x118>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	0119      	lsls	r1, r3, #4
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009a      	lsls	r2, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fbb2 f2f3 	udiv	r2, r2, r3
 8004804:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <UART_SetConfig+0x118>)
 8004806:	fba3 0302 	umull	r0, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2064      	movs	r0, #100	; 0x64
 800480e:	fb00 f303 	mul.w	r3, r0, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	3332      	adds	r3, #50	; 0x32
 8004818:	4a15      	ldr	r2, [pc, #84]	; (8004870 <UART_SetConfig+0x118>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004824:	4419      	add	r1, r3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f2f3 	udiv	r2, r2, r3
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <UART_SetConfig+0x118>)
 800483e:	fba3 0302 	umull	r0, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2064      	movs	r0, #100	; 0x64
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	3332      	adds	r3, #50	; 0x32
 8004850:	4a07      	ldr	r2, [pc, #28]	; (8004870 <UART_SetConfig+0x118>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	440a      	add	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40013800 	.word	0x40013800
 8004870:	51eb851f 	.word	0x51eb851f

08004874 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004886:	2b84      	cmp	r3, #132	; 0x84
 8004888:	d005      	beq.n	8004896 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800488a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	3303      	adds	r3, #3
 8004894:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004896:	68fb      	ldr	r3, [r7, #12]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80048a6:	f000 ff2b 	bl	8005700 <vTaskStartScheduler>
  
  return osOK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b2:	b089      	sub	sp, #36	; 0x24
 80048b4:	af04      	add	r7, sp, #16
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d020      	beq.n	8004904 <osThreadCreate+0x54>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01c      	beq.n	8004904 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685c      	ldr	r4, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681d      	ldr	r5, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691e      	ldr	r6, [r3, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ffc9 	bl	8004874 <makeFreeRtosPriority>
 80048e2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ec:	9202      	str	r2, [sp, #8]
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	9100      	str	r1, [sp, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	4632      	mov	r2, r6
 80048f6:	4629      	mov	r1, r5
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 fc1f 	bl	800513c <xTaskCreateStatic>
 80048fe:	4603      	mov	r3, r0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e01c      	b.n	800493e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685c      	ldr	r4, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004910:	b29e      	uxth	r6, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ffab 	bl	8004874 <makeFreeRtosPriority>
 800491e:	4602      	mov	r2, r0
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	9200      	str	r2, [sp, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4632      	mov	r2, r6
 800492c:	4629      	mov	r1, r5
 800492e:	4620      	mov	r0, r4
 8004930:	f000 fc5d 	bl	80051ee <xTaskCreate>
 8004934:	4603      	mov	r3, r0
 8004936:	2b01      	cmp	r3, #1
 8004938:	d001      	beq.n	800493e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004948 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <osDelay+0x16>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	e000      	b.n	8004960 <osDelay+0x18>
 800495e:	2301      	movs	r3, #1
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fd71 	bl	8005448 <vTaskDelay>
  
  return osOK;
 8004966:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d010      	beq.n	80049a4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d10b      	bne.n	80049a0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	2303      	movs	r3, #3
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	2200      	movs	r2, #0
 8004994:	2100      	movs	r1, #0
 8004996:	2001      	movs	r0, #1
 8004998:	f000 f934 	bl	8004c04 <xQueueGenericCreateStatic>
 800499c:	4603      	mov	r3, r0
 800499e:	e016      	b.n	80049ce <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e014      	b.n	80049ce <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d110      	bne.n	80049cc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80049aa:	2203      	movs	r2, #3
 80049ac:	2100      	movs	r1, #0
 80049ae:	2001      	movs	r0, #1
 80049b0:	f000 f99a 	bl	8004ce8 <xQueueGenericCreate>
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <osSemaphoreCreate+0x58>
 80049bc:	2300      	movs	r3, #0
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f9ec 	bl	8004da0 <xQueueGenericSend>
      return sema;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	e000      	b.n	80049ce <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80049cc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 0208 	add.w	r2, r3, #8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f04f 32ff 	mov.w	r2, #4294967295
 80049ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f103 0208 	add.w	r2, r3, #8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f103 0208 	add.w	r2, r3, #8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d103      	bne.n	8004a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e00c      	b.n	8004aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3308      	adds	r3, #8
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e002      	b.n	8004aa0 <vListInsert+0x2e>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d2f6      	bcs.n	8004a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6892      	ldr	r2, [r2, #8]
 8004af8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6852      	ldr	r2, [r2, #4]
 8004b02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d103      	bne.n	8004b16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	1e5a      	subs	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	e7fe      	b.n	8004b5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004b5c:	f001 fbbc 	bl	80062d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	441a      	add	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	22ff      	movs	r2, #255	; 0xff
 8004ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	22ff      	movs	r2, #255	; 0xff
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d114      	bne.n	8004bdc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01a      	beq.n	8004bf0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3310      	adds	r3, #16
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 ffe0 	bl	8005b84 <xTaskRemoveFromEventList>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d012      	beq.n	8004bf0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <xQueueGenericReset+0xcc>)
 8004bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	e009      	b.n	8004bf0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3310      	adds	r3, #16
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fef8 	bl	80049d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3324      	adds	r3, #36	; 0x24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fef3 	bl	80049d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bf0:	f001 fba0 	bl	8006334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bf4:	2301      	movs	r3, #1
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08e      	sub	sp, #56	; 0x38
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <xQueueGenericCreateStatic+0x28>
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2a:	e7fe      	b.n	8004c2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <xQueueGenericCreateStatic+0x42>
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <xQueueGenericCreateStatic+0x4e>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <xQueueGenericCreateStatic+0x52>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueGenericCreateStatic+0x54>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <xQueueGenericCreateStatic+0x6c>
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	e7fe      	b.n	8004c6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <xQueueGenericCreateStatic+0x78>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <xQueueGenericCreateStatic+0x7c>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <xQueueGenericCreateStatic+0x7e>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <xQueueGenericCreateStatic+0x96>
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c9a:	2348      	movs	r3, #72	; 0x48
 8004c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b48      	cmp	r3, #72	; 0x48
 8004ca2:	d009      	beq.n	8004cb8 <xQueueGenericCreateStatic+0xb4>
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e7fe      	b.n	8004cb6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f842 	bl	8004d62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3730      	adds	r7, #48	; 0x30
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <xQueueGenericCreate+0x28>
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	e7fe      	b.n	8004d0e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e004      	b.n	8004d26 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3348      	adds	r3, #72	; 0x48
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fb8e 	bl	800644c <pvPortMalloc>
 8004d30:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00f      	beq.n	8004d58 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	3348      	adds	r3, #72	; 0x48
 8004d3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d46:	79fa      	ldrb	r2, [r7, #7]
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f805 	bl	8004d62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d58:	69bb      	ldr	r3, [r7, #24]
	}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e002      	b.n	8004d84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d90:	2101      	movs	r1, #1
 8004d92:	69b8      	ldr	r0, [r7, #24]
 8004d94:	f7ff fece 	bl	8004b34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <xQueueGenericSend+0x30>
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dce:	e7fe      	b.n	8004dce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <xQueueGenericSend+0x3e>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <xQueueGenericSend+0x42>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <xQueueGenericSend+0x44>
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <xQueueGenericSend+0x5c>
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfa:	e7fe      	b.n	8004dfa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d103      	bne.n	8004e0a <xQueueGenericSend+0x6a>
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <xQueueGenericSend+0x6e>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <xQueueGenericSend+0x70>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <xQueueGenericSend+0x88>
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e7fe      	b.n	8004e26 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e28:	f001 f866 	bl	8005ef8 <xTaskGetSchedulerState>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <xQueueGenericSend+0x98>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <xQueueGenericSend+0x9c>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <xQueueGenericSend+0x9e>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <xQueueGenericSend+0xb6>
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	e7fe      	b.n	8004e54 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e56:	f001 fa3f 	bl	80062d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <xQueueGenericSend+0xcc>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d129      	bne.n	8004ec0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e72:	f000 f88f 	bl	8004f94 <prvCopyDataToQueue>
 8004e76:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	3324      	adds	r3, #36	; 0x24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fe7d 	bl	8005b84 <xTaskRemoveFromEventList>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e90:	4b3f      	ldr	r3, [pc, #252]	; (8004f90 <xQueueGenericSend+0x1f0>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	e00a      	b.n	8004eb8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ea8:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <xQueueGenericSend+0x1f0>)
 8004eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004eb8:	f001 fa3c 	bl	8006334 <vPortExitCritical>
				return pdPASS;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e063      	b.n	8004f88 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec6:	f001 fa35 	bl	8006334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e05c      	b.n	8004f88 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 feb5 	bl	8005c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ee2:	f001 fa27 	bl	8006334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee6:	f000 fc69 	bl	80057bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eea:	f001 f9f5 	bl	80062d8 <vPortEnterCritical>
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef4:	b25b      	sxtb	r3, r3
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d103      	bne.n	8004f04 <xQueueGenericSend+0x164>
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0a:	b25b      	sxtb	r3, r3
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d103      	bne.n	8004f1a <xQueueGenericSend+0x17a>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1a:	f001 fa0b 	bl	8006334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1e:	1d3a      	adds	r2, r7, #4
 8004f20:	f107 0314 	add.w	r3, r7, #20
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fea4 	bl	8005c74 <xTaskCheckForTimeOut>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d124      	bne.n	8004f7c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f34:	f000 f8ea 	bl	800510c <prvIsQueueFull>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	3310      	adds	r3, #16
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fdf8 	bl	8005b3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4e:	f000 f88b 	bl	8005068 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f52:	f000 fc41 	bl	80057d8 <xTaskResumeAll>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af7c 	bne.w	8004e56 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <xQueueGenericSend+0x1f0>)
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	e772      	b.n	8004e56 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f72:	f000 f879 	bl	8005068 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f76:	f000 fc2f 	bl	80057d8 <xTaskResumeAll>
 8004f7a:	e76c      	b.n	8004e56 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7e:	f000 f873 	bl	8005068 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f82:	f000 fc29 	bl	80057d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f86:	2300      	movs	r3, #0
		}
	}
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3738      	adds	r7, #56	; 0x38
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d14d      	bne.n	8005056 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 ffb8 	bl	8005f34 <xTaskPriorityDisinherit>
 8004fc4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	e043      	b.n	8005056 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d119      	bne.n	8005008 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6898      	ldr	r0, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	f001 fc32 	bl	8006848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d32b      	bcc.n	8005056 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	e026      	b.n	8005056 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68d8      	ldr	r0, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	461a      	mov	r2, r3
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	f001 fc18 	bl	8006848 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	425b      	negs	r3, r3
 8005022:	441a      	add	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d207      	bcs.n	8005044 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	425b      	negs	r3, r3
 800503e:	441a      	add	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d105      	bne.n	8005056 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3b01      	subs	r3, #1
 8005054:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800505e:	697b      	ldr	r3, [r7, #20]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005070:	f001 f932 	bl	80062d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800507a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800507c:	e011      	b.n	80050a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d012      	beq.n	80050ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3324      	adds	r3, #36	; 0x24
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fd7a 	bl	8005b84 <xTaskRemoveFromEventList>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005096:	f000 fe4d 	bl	8005d34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	3b01      	subs	r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dce9      	bgt.n	800507e <prvUnlockQueue+0x16>
 80050aa:	e000      	b.n	80050ae <prvUnlockQueue+0x46>
					break;
 80050ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	22ff      	movs	r2, #255	; 0xff
 80050b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050b6:	f001 f93d 	bl	8006334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050ba:	f001 f90d 	bl	80062d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c6:	e011      	b.n	80050ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d012      	beq.n	80050f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3310      	adds	r3, #16
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fd55 	bl	8005b84 <xTaskRemoveFromEventList>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050e0:	f000 fe28 	bl	8005d34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	dce9      	bgt.n	80050c8 <prvUnlockQueue+0x60>
 80050f4:	e000      	b.n	80050f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	22ff      	movs	r2, #255	; 0xff
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005100:	f001 f918 	bl	8006334 <vPortExitCritical>
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005114:	f001 f8e0 	bl	80062d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	429a      	cmp	r2, r3
 8005122:	d102      	bne.n	800512a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e001      	b.n	800512e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800512e:	f001 f901 	bl	8006334 <vPortExitCritical>

	return xReturn;
 8005132:	68fb      	ldr	r3, [r7, #12]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af04      	add	r7, sp, #16
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <xTaskCreateStatic+0x28>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	623b      	str	r3, [r7, #32]
 8005162:	e7fe      	b.n	8005162 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <xTaskCreateStatic+0x42>
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e7fe      	b.n	800517c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800517e:	2354      	movs	r3, #84	; 0x54
 8005180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b54      	cmp	r3, #84	; 0x54
 8005186:	d009      	beq.n	800519c <xTaskCreateStatic+0x60>
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	e7fe      	b.n	800519a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01e      	beq.n	80051e0 <xTaskCreateStatic+0xa4>
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051ba:	2300      	movs	r3, #0
 80051bc:	9303      	str	r3, [sp, #12]
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f850 	bl	8005278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051da:	f000 f8cb 	bl	8005374 <prvAddNewTaskToReadyList>
 80051de:	e001      	b.n	80051e4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051e4:	697b      	ldr	r3, [r7, #20]
	}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3728      	adds	r7, #40	; 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08c      	sub	sp, #48	; 0x30
 80051f2:	af04      	add	r7, sp, #16
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4618      	mov	r0, r3
 8005204:	f001 f922 	bl	800644c <pvPortMalloc>
 8005208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00e      	beq.n	800522e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005210:	2054      	movs	r0, #84	; 0x54
 8005212:	f001 f91b 	bl	800644c <pvPortMalloc>
 8005216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
 8005224:	e005      	b.n	8005232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005226:	6978      	ldr	r0, [r7, #20]
 8005228:	f001 f9d2 	bl	80065d0 <vPortFree>
 800522c:	e001      	b.n	8005232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	2300      	movs	r3, #0
 8005244:	9303      	str	r3, [sp, #12]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	9302      	str	r3, [sp, #8]
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f80e 	bl	8005278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800525c:	69f8      	ldr	r0, [r7, #28]
 800525e:	f000 f889 	bl	8005374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005262:	2301      	movs	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e002      	b.n	800526e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005268:	f04f 33ff 	mov.w	r3, #4294967295
 800526c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800526e:	69bb      	ldr	r3, [r7, #24]
	}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005290:	3b01      	subs	r3, #1
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f023 0307 	bic.w	r3, r3, #7
 800529e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <prvInitialiseNewTask+0x46>
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e7fe      	b.n	80052bc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e012      	b.n	80052ea <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	7819      	ldrb	r1, [r3, #0]
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	3334      	adds	r3, #52	; 0x34
 80052d4:	460a      	mov	r2, r1
 80052d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b0f      	cmp	r3, #15
 80052ee:	d9e9      	bls.n	80052c4 <prvInitialiseNewTask+0x4c>
 80052f0:	e000      	b.n	80052f4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80052f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d901      	bls.n	8005306 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005302:	2306      	movs	r3, #6
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2200      	movs	r2, #0
 8005316:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	3304      	adds	r3, #4
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fb79 	bl	8004a14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	3318      	adds	r3, #24
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fb74 	bl	8004a14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005330:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	f1c3 0207 	rsb	r2, r3, #7
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005340:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2200      	movs	r2, #0
 8005346:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	69b8      	ldr	r0, [r7, #24]
 8005356:	f000 fed7 	bl	8006108 <pxPortInitialiseStack>
 800535a:	4602      	mov	r2, r0
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800536c:	bf00      	nop
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800537c:	f000 ffac 	bl	80062d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005380:	4b2a      	ldr	r3, [pc, #168]	; (800542c <prvAddNewTaskToReadyList+0xb8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a29      	ldr	r2, [pc, #164]	; (800542c <prvAddNewTaskToReadyList+0xb8>)
 8005388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800538a:	4b29      	ldr	r3, [pc, #164]	; (8005430 <prvAddNewTaskToReadyList+0xbc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005392:	4a27      	ldr	r2, [pc, #156]	; (8005430 <prvAddNewTaskToReadyList+0xbc>)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005398:	4b24      	ldr	r3, [pc, #144]	; (800542c <prvAddNewTaskToReadyList+0xb8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d110      	bne.n	80053c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053a0:	f000 fcec 	bl	8005d7c <prvInitialiseTaskLists>
 80053a4:	e00d      	b.n	80053c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053a6:	4b23      	ldr	r3, [pc, #140]	; (8005434 <prvAddNewTaskToReadyList+0xc0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053ae:	4b20      	ldr	r3, [pc, #128]	; (8005430 <prvAddNewTaskToReadyList+0xbc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d802      	bhi.n	80053c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053bc:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <prvAddNewTaskToReadyList+0xbc>)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <prvAddNewTaskToReadyList+0xc4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <prvAddNewTaskToReadyList+0xc4>)
 80053ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	2201      	movs	r2, #1
 80053d2:	409a      	lsls	r2, r3
 80053d4:	4b19      	ldr	r3, [pc, #100]	; (800543c <prvAddNewTaskToReadyList+0xc8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4313      	orrs	r3, r2
 80053da:	4a18      	ldr	r2, [pc, #96]	; (800543c <prvAddNewTaskToReadyList+0xc8>)
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4a15      	ldr	r2, [pc, #84]	; (8005440 <prvAddNewTaskToReadyList+0xcc>)
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f7ff fb19 	bl	8004a2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053fa:	f000 ff9b 	bl	8006334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <prvAddNewTaskToReadyList+0xc0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <prvAddNewTaskToReadyList+0xbc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	429a      	cmp	r2, r3
 8005412:	d207      	bcs.n	8005424 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <prvAddNewTaskToReadyList+0xd0>)
 8005416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000890 	.word	0x20000890
 8005430:	20000790 	.word	0x20000790
 8005434:	2000089c 	.word	0x2000089c
 8005438:	200008ac 	.word	0x200008ac
 800543c:	20000898 	.word	0x20000898
 8005440:	20000794 	.word	0x20000794
 8005444:	e000ed04 	.word	0xe000ed04

08005448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d016      	beq.n	8005488 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <vTaskDelay+0x60>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <vTaskDelay+0x2e>
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	e7fe      	b.n	8005474 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005476:	f000 f9a1 	bl	80057bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800547a:	2100      	movs	r1, #0
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fddd 	bl	800603c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005482:	f000 f9a9 	bl	80057d8 <xTaskResumeAll>
 8005486:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d107      	bne.n	800549e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <vTaskDelay+0x64>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200008b8 	.word	0x200008b8
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80054b8:	f000 ff0e 	bl	80062d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <vTaskSuspend+0x18>
 80054c2:	4b3c      	ldr	r3, [pc, #240]	; (80055b4 <vTaskSuspend+0x104>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	e000      	b.n	80054ca <vTaskSuspend+0x1a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fb06 	bl	8004ae2 <uxListRemove>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d115      	bne.n	8005508 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4935      	ldr	r1, [pc, #212]	; (80055b8 <vTaskSuspend+0x108>)
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <vTaskSuspend+0x58>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	2201      	movs	r2, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43da      	mvns	r2, r3
 80054fe:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <vTaskSuspend+0x10c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4013      	ands	r3, r2
 8005504:	4a2d      	ldr	r2, [pc, #180]	; (80055bc <vTaskSuspend+0x10c>)
 8005506:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3318      	adds	r3, #24
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fae4 	bl	8004ae2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3304      	adds	r3, #4
 800551e:	4619      	mov	r1, r3
 8005520:	4827      	ldr	r0, [pc, #156]	; (80055c0 <vTaskSuspend+0x110>)
 8005522:	f7ff fa83 	bl	8004a2c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d103      	bne.n	800553a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800553a:	f000 fefb 	bl	8006334 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <vTaskSuspend+0x114>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005546:	f000 fec7 	bl	80062d8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800554a:	f000 fcb1 	bl	8005eb0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800554e:	f000 fef1 	bl	8006334 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005552:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <vTaskSuspend+0x104>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	429a      	cmp	r2, r3
 800555a:	d126      	bne.n	80055aa <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800555c:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <vTaskSuspend+0x114>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d016      	beq.n	8005592 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005564:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <vTaskSuspend+0x118>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <vTaskSuspend+0xd0>
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	e7fe      	b.n	800557e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8005580:	4b12      	ldr	r3, [pc, #72]	; (80055cc <vTaskSuspend+0x11c>)
 8005582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005590:	e00b      	b.n	80055aa <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <vTaskSuspend+0x110>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <vTaskSuspend+0x120>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d103      	bne.n	80055a6 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <vTaskSuspend+0x104>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
	}
 80055a4:	e001      	b.n	80055aa <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 80055a6:	f000 fa6f 	bl	8005a88 <vTaskSwitchContext>
	}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000790 	.word	0x20000790
 80055b8:	20000794 	.word	0x20000794
 80055bc:	20000898 	.word	0x20000898
 80055c0:	2000087c 	.word	0x2000087c
 80055c4:	2000089c 	.word	0x2000089c
 80055c8:	200008b8 	.word	0x200008b8
 80055cc:	e000ed04 	.word	0xe000ed04
 80055d0:	20000890 	.word	0x20000890

080055d4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvTaskIsTaskSuspended+0x2a>
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e7fe      	b.n	80055fc <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	4a0f      	ldr	r2, [pc, #60]	; (8005640 <prvTaskIsTaskSuspended+0x6c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d101      	bne.n	800560c <prvTaskIsTaskSuspended+0x38>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <prvTaskIsTaskSuspended+0x3a>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00f      	beq.n	8005632 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	4a0b      	ldr	r2, [pc, #44]	; (8005644 <prvTaskIsTaskSuspended+0x70>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00a      	beq.n	8005632 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <prvTaskIsTaskSuspended+0x54>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <prvTaskIsTaskSuspended+0x56>
 8005628:	2300      	movs	r3, #0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005632:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005634:	4618      	mov	r0, r3
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2000087c 	.word	0x2000087c
 8005644:	20000850 	.word	0x20000850

08005648 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <vTaskResume+0x26>
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	e7fe      	b.n	800566c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d039      	beq.n	80056e8 <vTaskResume+0xa0>
 8005674:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <vTaskResume+0xa8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	429a      	cmp	r2, r3
 800567c:	d034      	beq.n	80056e8 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 800567e:	f000 fe2b 	bl	80062d8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff ffa6 	bl	80055d4 <prvTaskIsTaskSuspended>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02a      	beq.n	80056e4 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3304      	adds	r3, #4
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fa25 	bl	8004ae2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	2201      	movs	r2, #1
 800569e:	409a      	lsls	r2, r3
 80056a0:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <vTaskResume+0xac>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <vTaskResume+0xac>)
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4a10      	ldr	r2, [pc, #64]	; (80056f8 <vTaskResume+0xb0>)
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7ff f9b3 	bl	8004a2c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <vTaskResume+0xa8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d307      	bcc.n	80056e4 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80056d4:	4b09      	ldr	r3, [pc, #36]	; (80056fc <vTaskResume+0xb4>)
 80056d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80056e4:	f000 fe26 	bl	8006334 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000790 	.word	0x20000790
 80056f4:	20000898 	.word	0x20000898
 80056f8:	20000794 	.word	0x20000794
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800570e:	463a      	mov	r2, r7
 8005710:	1d39      	adds	r1, r7, #4
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	4618      	mov	r0, r3
 8005718:	f7fa fd76 	bl	8000208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	9202      	str	r2, [sp, #8]
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	2300      	movs	r3, #0
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	460a      	mov	r2, r1
 800572e:	491d      	ldr	r1, [pc, #116]	; (80057a4 <vTaskStartScheduler+0xa4>)
 8005730:	481d      	ldr	r0, [pc, #116]	; (80057a8 <vTaskStartScheduler+0xa8>)
 8005732:	f7ff fd03 	bl	800513c <xTaskCreateStatic>
 8005736:	4602      	mov	r2, r0
 8005738:	4b1c      	ldr	r3, [pc, #112]	; (80057ac <vTaskStartScheduler+0xac>)
 800573a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <vTaskStartScheduler+0xac>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005744:	2301      	movs	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e001      	b.n	800574e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d115      	bne.n	8005780 <vTaskStartScheduler+0x80>
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <vTaskStartScheduler+0xb0>)
 8005768:	f04f 32ff 	mov.w	r2, #4294967295
 800576c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <vTaskStartScheduler+0xb4>)
 8005770:	2201      	movs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005774:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <vTaskStartScheduler+0xb8>)
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800577a:	f000 fd3d 	bl	80061f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800577e:	e00d      	b.n	800579c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d109      	bne.n	800579c <vTaskStartScheduler+0x9c>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e7fe      	b.n	800579a <vTaskStartScheduler+0x9a>
}
 800579c:	bf00      	nop
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	08007210 	.word	0x08007210
 80057a8:	08005d4d 	.word	0x08005d4d
 80057ac:	200008b4 	.word	0x200008b4
 80057b0:	200008b0 	.word	0x200008b0
 80057b4:	2000089c 	.word	0x2000089c
 80057b8:	20000894 	.word	0x20000894

080057bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <vTaskSuspendAll+0x18>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	4a03      	ldr	r2, [pc, #12]	; (80057d4 <vTaskSuspendAll+0x18>)
 80057c8:	6013      	str	r3, [r2, #0]
}
 80057ca:	bf00      	nop
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	200008b8 	.word	0x200008b8

080057d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057e6:	4b41      	ldr	r3, [pc, #260]	; (80058ec <xTaskResumeAll+0x114>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <xTaskResumeAll+0x2a>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	e7fe      	b.n	8005800 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005802:	f000 fd69 	bl	80062d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005806:	4b39      	ldr	r3, [pc, #228]	; (80058ec <xTaskResumeAll+0x114>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3b01      	subs	r3, #1
 800580c:	4a37      	ldr	r2, [pc, #220]	; (80058ec <xTaskResumeAll+0x114>)
 800580e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005810:	4b36      	ldr	r3, [pc, #216]	; (80058ec <xTaskResumeAll+0x114>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d161      	bne.n	80058dc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005818:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <xTaskResumeAll+0x118>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d05d      	beq.n	80058dc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005820:	e02e      	b.n	8005880 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005822:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <xTaskResumeAll+0x11c>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3318      	adds	r3, #24
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff f957 	bl	8004ae2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3304      	adds	r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff f952 	bl	8004ae2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	2201      	movs	r2, #1
 8005844:	409a      	lsls	r2, r3
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <xTaskResumeAll+0x120>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <xTaskResumeAll+0x120>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4a27      	ldr	r2, [pc, #156]	; (80058fc <xTaskResumeAll+0x124>)
 800585e:	441a      	add	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7ff f8e0 	bl	8004a2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4b23      	ldr	r3, [pc, #140]	; (8005900 <xTaskResumeAll+0x128>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <xTaskResumeAll+0x12c>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005880:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <xTaskResumeAll+0x11c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1cc      	bne.n	8005822 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800588e:	f000 fb0f 	bl	8005eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <xTaskResumeAll+0x130>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d010      	beq.n	80058c0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800589e:	f000 f837 	bl	8005910 <xTaskIncrementTick>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80058a8:	4b16      	ldr	r3, [pc, #88]	; (8005904 <xTaskResumeAll+0x12c>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f1      	bne.n	800589e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <xTaskResumeAll+0x130>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058c0:	4b10      	ldr	r3, [pc, #64]	; (8005904 <xTaskResumeAll+0x12c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058c8:	2301      	movs	r3, #1
 80058ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <xTaskResumeAll+0x134>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058dc:	f000 fd2a 	bl	8006334 <vPortExitCritical>

	return xAlreadyYielded;
 80058e0:	68bb      	ldr	r3, [r7, #8]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200008b8 	.word	0x200008b8
 80058f0:	20000890 	.word	0x20000890
 80058f4:	20000850 	.word	0x20000850
 80058f8:	20000898 	.word	0x20000898
 80058fc:	20000794 	.word	0x20000794
 8005900:	20000790 	.word	0x20000790
 8005904:	200008a4 	.word	0x200008a4
 8005908:	200008a0 	.word	0x200008a0
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800591a:	4b50      	ldr	r3, [pc, #320]	; (8005a5c <xTaskIncrementTick+0x14c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f040 808c 	bne.w	8005a3c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005924:	4b4e      	ldr	r3, [pc, #312]	; (8005a60 <xTaskIncrementTick+0x150>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800592c:	4a4c      	ldr	r2, [pc, #304]	; (8005a60 <xTaskIncrementTick+0x150>)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11f      	bne.n	8005978 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005938:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <xTaskIncrementTick+0x154>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <xTaskIncrementTick+0x46>
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	e7fe      	b.n	8005954 <xTaskIncrementTick+0x44>
 8005956:	4b43      	ldr	r3, [pc, #268]	; (8005a64 <xTaskIncrementTick+0x154>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	4b42      	ldr	r3, [pc, #264]	; (8005a68 <xTaskIncrementTick+0x158>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a40      	ldr	r2, [pc, #256]	; (8005a64 <xTaskIncrementTick+0x154>)
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	4a40      	ldr	r2, [pc, #256]	; (8005a68 <xTaskIncrementTick+0x158>)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <xTaskIncrementTick+0x15c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	4a3e      	ldr	r2, [pc, #248]	; (8005a6c <xTaskIncrementTick+0x15c>)
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	f000 fa9c 	bl	8005eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005978:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <xTaskIncrementTick+0x160>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	429a      	cmp	r2, r3
 8005980:	d34d      	bcc.n	8005a1e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005982:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <xTaskIncrementTick+0x154>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <xTaskIncrementTick+0x80>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <xTaskIncrementTick+0x82>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005996:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <xTaskIncrementTick+0x160>)
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	601a      	str	r2, [r3, #0]
					break;
 800599e:	e03e      	b.n	8005a1e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059a0:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <xTaskIncrementTick+0x154>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d203      	bcs.n	80059c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059b8:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <xTaskIncrementTick+0x160>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6013      	str	r3, [r2, #0]
						break;
 80059be:	e02e      	b.n	8005a1e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff f88c 	bl	8004ae2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	3318      	adds	r3, #24
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff f883 	bl	8004ae2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	2201      	movs	r2, #1
 80059e2:	409a      	lsls	r2, r3
 80059e4:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <xTaskIncrementTick+0x164>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <xTaskIncrementTick+0x164>)
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a1f      	ldr	r2, [pc, #124]	; (8005a78 <xTaskIncrementTick+0x168>)
 80059fc:	441a      	add	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f7ff f811 	bl	8004a2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <xTaskIncrementTick+0x16c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d3b4      	bcc.n	8005982 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a1c:	e7b1      	b.n	8005982 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a1e:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <xTaskIncrementTick+0x16c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	4914      	ldr	r1, [pc, #80]	; (8005a78 <xTaskIncrementTick+0x168>)
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d907      	bls.n	8005a46 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005a36:	2301      	movs	r3, #1
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e004      	b.n	8005a46 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <xTaskIncrementTick+0x170>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	4a0f      	ldr	r2, [pc, #60]	; (8005a80 <xTaskIncrementTick+0x170>)
 8005a44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <xTaskIncrementTick+0x174>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a52:	697b      	ldr	r3, [r7, #20]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	200008b8 	.word	0x200008b8
 8005a60:	20000894 	.word	0x20000894
 8005a64:	20000848 	.word	0x20000848
 8005a68:	2000084c 	.word	0x2000084c
 8005a6c:	200008a8 	.word	0x200008a8
 8005a70:	200008b0 	.word	0x200008b0
 8005a74:	20000898 	.word	0x20000898
 8005a78:	20000794 	.word	0x20000794
 8005a7c:	20000790 	.word	0x20000790
 8005a80:	200008a0 	.word	0x200008a0
 8005a84:	200008a4 	.word	0x200008a4

08005a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a8e:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <vTaskSwitchContext+0xa0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a96:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <vTaskSwitchContext+0xa4>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a9c:	e03e      	b.n	8005b1c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <vTaskSwitchContext+0xa4>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005aa4:	4b22      	ldr	r3, [pc, #136]	; (8005b30 <vTaskSwitchContext+0xa8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	fab3 f383 	clz	r3, r3
 8005ab0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ab2:	7afb      	ldrb	r3, [r7, #11]
 8005ab4:	f1c3 031f 	rsb	r3, r3, #31
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	491e      	ldr	r1, [pc, #120]	; (8005b34 <vTaskSwitchContext+0xac>)
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
 8005ae0:	e7fe      	b.n	8005ae0 <vTaskSwitchContext+0x58>
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <vTaskSwitchContext+0xac>)
 8005aee:	4413      	add	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	3308      	adds	r3, #8
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d104      	bne.n	8005b12 <vTaskSwitchContext+0x8a>
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a07      	ldr	r2, [pc, #28]	; (8005b38 <vTaskSwitchContext+0xb0>)
 8005b1a:	6013      	str	r3, [r2, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	200008b8 	.word	0x200008b8
 8005b2c:	200008a4 	.word	0x200008a4
 8005b30:	20000898 	.word	0x20000898
 8005b34:	20000794 	.word	0x20000794
 8005b38:	20000790 	.word	0x20000790

08005b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d109      	bne.n	8005b60 <vTaskPlaceOnEventList+0x24>
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e7fe      	b.n	8005b5e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <vTaskPlaceOnEventList+0x44>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3318      	adds	r3, #24
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fe ff82 	bl	8004a72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b6e:	2101      	movs	r1, #1
 8005b70:	6838      	ldr	r0, [r7, #0]
 8005b72:	f000 fa63 	bl	800603c <prvAddCurrentTaskToDelayedList>
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000790 	.word	0x20000790

08005b84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <xTaskRemoveFromEventList+0x2a>
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e7fe      	b.n	8005bac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3318      	adds	r3, #24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe ff95 	bl	8004ae2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <xTaskRemoveFromEventList+0xac>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11c      	bne.n	8005bfa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe ff8c 	bl	8004ae2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	2201      	movs	r2, #1
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <xTaskRemoveFromEventList+0xb0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <xTaskRemoveFromEventList+0xb0>)
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <xTaskRemoveFromEventList+0xb4>)
 8005bea:	441a      	add	r2, r3
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f7fe ff1a 	bl	8004a2c <vListInsertEnd>
 8005bf8:	e005      	b.n	8005c06 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3318      	adds	r3, #24
 8005bfe:	4619      	mov	r1, r3
 8005c00:	480e      	ldr	r0, [pc, #56]	; (8005c3c <xTaskRemoveFromEventList+0xb8>)
 8005c02:	f7fe ff13 	bl	8004a2c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <xTaskRemoveFromEventList+0xbc>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d905      	bls.n	8005c20 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <xTaskRemoveFromEventList+0xc0>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e001      	b.n	8005c24 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005c24:	697b      	ldr	r3, [r7, #20]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200008b8 	.word	0x200008b8
 8005c34:	20000898 	.word	0x20000898
 8005c38:	20000794 	.word	0x20000794
 8005c3c:	20000850 	.word	0x20000850
 8005c40:	20000790 	.word	0x20000790
 8005c44:	200008a4 	.word	0x200008a4

08005c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <vTaskInternalSetTimeOutState+0x24>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <vTaskInternalSetTimeOutState+0x28>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	200008a8 	.word	0x200008a8
 8005c70:	20000894 	.word	0x20000894

08005c74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <xTaskCheckForTimeOut+0x24>
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	613b      	str	r3, [r7, #16]
 8005c96:	e7fe      	b.n	8005c96 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <xTaskCheckForTimeOut+0x3e>
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e7fe      	b.n	8005cb0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005cb2:	f000 fb11 	bl	80062d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <xTaskCheckForTimeOut+0xb8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d102      	bne.n	8005cd6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e023      	b.n	8005d1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <xTaskCheckForTimeOut+0xbc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d007      	beq.n	8005cf2 <xTaskCheckForTimeOut+0x7e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d302      	bcc.n	8005cf2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e015      	b.n	8005d1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d20b      	bcs.n	8005d14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff9d 	bl	8005c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	e004      	b.n	8005d1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d1e:	f000 fb09 	bl	8006334 <vPortExitCritical>

	return xReturn;
 8005d22:	69fb      	ldr	r3, [r7, #28]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000894 	.word	0x20000894
 8005d30:	200008a8 	.word	0x200008a8

08005d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <vTaskMissedYield+0x14>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	200008a4 	.word	0x200008a4

08005d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d54:	f000 f852 	bl	8005dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <prvIdleTask+0x28>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d9f9      	bls.n	8005d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <prvIdleTask+0x2c>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d70:	e7f0      	b.n	8005d54 <prvIdleTask+0x8>
 8005d72:	bf00      	nop
 8005d74:	20000794 	.word	0x20000794
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e00c      	b.n	8005da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <prvInitialiseTaskLists+0x60>)
 8005d94:	4413      	add	r3, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fe1d 	bl	80049d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d9ef      	bls.n	8005d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005da8:	480d      	ldr	r0, [pc, #52]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005daa:	f7fe fe14 	bl	80049d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dae:	480d      	ldr	r0, [pc, #52]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005db0:	f7fe fe11 	bl	80049d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <prvInitialiseTaskLists+0x6c>)
 8005db6:	f7fe fe0e 	bl	80049d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dba:	480c      	ldr	r0, [pc, #48]	; (8005dec <prvInitialiseTaskLists+0x70>)
 8005dbc:	f7fe fe0b 	bl	80049d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dc0:	480b      	ldr	r0, [pc, #44]	; (8005df0 <prvInitialiseTaskLists+0x74>)
 8005dc2:	f7fe fe08 	bl	80049d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <prvInitialiseTaskLists+0x78>)
 8005dc8:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <prvInitialiseTaskLists+0x7c>)
 8005dce:	4a05      	ldr	r2, [pc, #20]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005dd0:	601a      	str	r2, [r3, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000794 	.word	0x20000794
 8005de0:	20000820 	.word	0x20000820
 8005de4:	20000834 	.word	0x20000834
 8005de8:	20000850 	.word	0x20000850
 8005dec:	20000864 	.word	0x20000864
 8005df0:	2000087c 	.word	0x2000087c
 8005df4:	20000848 	.word	0x20000848
 8005df8:	2000084c 	.word	0x2000084c

08005dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e02:	e019      	b.n	8005e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e04:	f000 fa68 	bl	80062d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <prvCheckTasksWaitingTermination+0x4c>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fe64 	bl	8004ae2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <prvCheckTasksWaitingTermination+0x50>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <prvCheckTasksWaitingTermination+0x50>)
 8005e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e2e:	f000 fa81 	bl	8006334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f80e 	bl	8005e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e1      	bne.n	8005e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000864 	.word	0x20000864
 8005e4c:	20000890 	.word	0x20000890
 8005e50:	20000878 	.word	0x20000878

08005e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fbb0 	bl	80065d0 <vPortFree>
				vPortFree( pxTCB );
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbad 	bl	80065d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e76:	e017      	b.n	8005ea8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d103      	bne.n	8005e8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fba4 	bl	80065d0 <vPortFree>
	}
 8005e88:	e00e      	b.n	8005ea8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d009      	beq.n	8005ea8 <prvDeleteTCB+0x54>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	e7fe      	b.n	8005ea6 <prvDeleteTCB+0x52>
	}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <prvResetNextTaskUnblockTime+0x40>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <prvResetNextTaskUnblockTime+0x14>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <prvResetNextTaskUnblockTime+0x16>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eca:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvResetNextTaskUnblockTime+0x44>)
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ed2:	e008      	b.n	8005ee6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <prvResetNextTaskUnblockTime+0x40>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <prvResetNextTaskUnblockTime+0x44>)
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	20000848 	.word	0x20000848
 8005ef4:	200008b0 	.word	0x200008b0

08005ef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <xTaskGetSchedulerState+0x34>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f06:	2301      	movs	r3, #1
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	e008      	b.n	8005f1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f0c:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <xTaskGetSchedulerState+0x38>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f14:	2302      	movs	r3, #2
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	e001      	b.n	8005f1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f1e:	687b      	ldr	r3, [r7, #4]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	2000089c 	.word	0x2000089c
 8005f30:	200008b8 	.word	0x200008b8

08005f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d06c      	beq.n	8006024 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4a:	4b39      	ldr	r3, [pc, #228]	; (8006030 <xTaskPriorityDisinherit+0xfc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d009      	beq.n	8005f68 <xTaskPriorityDisinherit+0x34>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e7fe      	b.n	8005f66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d109      	bne.n	8005f84 <xTaskPriorityDisinherit+0x50>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	e7fe      	b.n	8005f82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d044      	beq.n	8006024 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d140      	bne.n	8006024 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fd9b 	bl	8004ae2 <uxListRemove>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d115      	bne.n	8005fde <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	491f      	ldr	r1, [pc, #124]	; (8006034 <xTaskPriorityDisinherit+0x100>)
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <xTaskPriorityDisinherit+0xaa>
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43da      	mvns	r2, r3
 8005fd4:	4b18      	ldr	r3, [pc, #96]	; (8006038 <xTaskPriorityDisinherit+0x104>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <xTaskPriorityDisinherit+0x104>)
 8005fdc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f1c3 0207 	rsb	r2, r3, #7
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <xTaskPriorityDisinherit+0x104>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	4a0d      	ldr	r2, [pc, #52]	; (8006038 <xTaskPriorityDisinherit+0x104>)
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a08      	ldr	r2, [pc, #32]	; (8006034 <xTaskPriorityDisinherit+0x100>)
 8006012:	441a      	add	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7fe fd06 	bl	8004a2c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006020:	2301      	movs	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006024:	697b      	ldr	r3, [r7, #20]
	}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000790 	.word	0x20000790
 8006034:	20000794 	.word	0x20000794
 8006038:	20000898 	.word	0x20000898

0800603c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006046:	4b29      	ldr	r3, [pc, #164]	; (80060ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800604c:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3304      	adds	r3, #4
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fd45 	bl	8004ae2 <uxListRemove>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	2201      	movs	r2, #1
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43da      	mvns	r2, r3
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4013      	ands	r3, r2
 8006072:	4a20      	ldr	r2, [pc, #128]	; (80060f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006074:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d10a      	bne.n	8006094 <prvAddCurrentTaskToDelayedList+0x58>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3304      	adds	r3, #4
 800608a:	4619      	mov	r1, r3
 800608c:	481a      	ldr	r0, [pc, #104]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800608e:	f7fe fccd 	bl	8004a2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006092:	e026      	b.n	80060e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d209      	bcs.n	80060c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ac:	4b13      	ldr	r3, [pc, #76]	; (80060fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe fcda 	bl	8004a72 <vListInsert>
}
 80060be:	e010      	b.n	80060e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f7fe fcd0 	bl	8004a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d202      	bcs.n	80060e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6013      	str	r3, [r2, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000894 	.word	0x20000894
 80060f0:	20000790 	.word	0x20000790
 80060f4:	20000898 	.word	0x20000898
 80060f8:	2000087c 	.word	0x2000087c
 80060fc:	2000084c 	.word	0x2000084c
 8006100:	20000848 	.word	0x20000848
 8006104:	200008b0 	.word	0x200008b0

08006108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3b04      	subs	r3, #4
 8006118:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b04      	subs	r3, #4
 8006126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3b04      	subs	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006138:	4a08      	ldr	r2, [pc, #32]	; (800615c <pxPortInitialiseStack+0x54>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3b14      	subs	r3, #20
 8006142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b20      	subs	r3, #32
 800614e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	08006161 	.word	0x08006161

08006160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006166:	2300      	movs	r3, #0
 8006168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800616a:	4b10      	ldr	r3, [pc, #64]	; (80061ac <prvTaskExitError+0x4c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d009      	beq.n	8006188 <prvTaskExitError+0x28>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e7fe      	b.n	8006186 <prvTaskExitError+0x26>
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800619a:	bf00      	nop
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0fc      	beq.n	800619c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	200000a8 	.word	0x200000a8

080061b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <pxCurrentTCBConst2>)
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	6808      	ldr	r0, [r1, #0]
 80061b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061ba:	f380 8809 	msr	PSP, r0
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f380 8811 	msr	BASEPRI, r0
 80061ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80061ce:	4770      	bx	lr

080061d0 <pxCurrentTCBConst2>:
 80061d0:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061d8:	4806      	ldr	r0, [pc, #24]	; (80061f4 <prvPortStartFirstTask+0x1c>)
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	f380 8808 	msr	MSP, r0
 80061e2:	b662      	cpsie	i
 80061e4:	b661      	cpsie	f
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	df00      	svc	0
 80061f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061f2:	bf00      	nop
 80061f4:	e000ed08 	.word	0xe000ed08

080061f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061fe:	4b31      	ldr	r3, [pc, #196]	; (80062c4 <xPortStartScheduler+0xcc>)
 8006200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	22ff      	movs	r2, #255	; 0xff
 800620e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <xPortStartScheduler+0xd0>)
 8006224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <xPortStartScheduler+0xd4>)
 8006228:	2207      	movs	r2, #7
 800622a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800622c:	e009      	b.n	8006242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <xPortStartScheduler+0xd4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3b01      	subs	r3, #1
 8006234:	4a25      	ldr	r2, [pc, #148]	; (80062cc <xPortStartScheduler+0xd4>)
 8006236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	b2db      	uxtb	r3, r3
 8006240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b80      	cmp	r3, #128	; 0x80
 800624c:	d0ef      	beq.n	800622e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800624e:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <xPortStartScheduler+0xd4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1c3 0307 	rsb	r3, r3, #7
 8006256:	2b04      	cmp	r3, #4
 8006258:	d009      	beq.n	800626e <xPortStartScheduler+0x76>
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	60bb      	str	r3, [r7, #8]
 800626c:	e7fe      	b.n	800626c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800626e:	4b17      	ldr	r3, [pc, #92]	; (80062cc <xPortStartScheduler+0xd4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	4a15      	ldr	r2, [pc, #84]	; (80062cc <xPortStartScheduler+0xd4>)
 8006276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006278:	4b14      	ldr	r3, [pc, #80]	; (80062cc <xPortStartScheduler+0xd4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006280:	4a12      	ldr	r2, [pc, #72]	; (80062cc <xPortStartScheduler+0xd4>)
 8006282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <xPortStartScheduler+0xd8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <xPortStartScheduler+0xd8>)
 8006292:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <xPortStartScheduler+0xd8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <xPortStartScheduler+0xd8>)
 800629e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062a4:	f000 f8b0 	bl	8006408 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <xPortStartScheduler+0xdc>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062ae:	f7ff ff93 	bl	80061d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062b2:	f7ff fbe9 	bl	8005a88 <vTaskSwitchContext>
	prvTaskExitError();
 80062b6:	f7ff ff53 	bl	8006160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000e400 	.word	0xe000e400
 80062c8:	200008bc 	.word	0x200008bc
 80062cc:	200008c0 	.word	0x200008c0
 80062d0:	e000ed20 	.word	0xe000ed20
 80062d4:	200000a8 	.word	0x200000a8

080062d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <vPortEnterCritical+0x54>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a0d      	ldr	r2, [pc, #52]	; (800632c <vPortEnterCritical+0x54>)
 80062f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <vPortEnterCritical+0x54>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d10e      	bne.n	8006320 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006302:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <vPortEnterCritical+0x58>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d009      	beq.n	8006320 <vPortEnterCritical+0x48>
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	e7fe      	b.n	800631e <vPortEnterCritical+0x46>
	}
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	200000a8 	.word	0x200000a8
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <vPortExitCritical+0x48>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <vPortExitCritical+0x22>
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	e7fe      	b.n	8006354 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <vPortExitCritical+0x48>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3b01      	subs	r3, #1
 800635c:	4a07      	ldr	r2, [pc, #28]	; (800637c <vPortExitCritical+0x48>)
 800635e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <vPortExitCritical+0x48>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d104      	bne.n	8006372 <vPortExitCritical+0x3e>
 8006368:	2300      	movs	r3, #0
 800636a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr
 800637c:	200000a8 	.word	0x200000a8

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006390:	6010      	str	r0, [r2, #0]
 8006392:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006396:	f04f 0050 	mov.w	r0, #80	; 0x50
 800639a:	f380 8811 	msr	BASEPRI, r0
 800639e:	f7ff fb73 	bl	8005a88 <vTaskSwitchContext>
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8811 	msr	BASEPRI, r0
 80063aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	6808      	ldr	r0, [r1, #0]
 80063b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063b6:	f380 8809 	msr	PSP, r0
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	4770      	bx	lr

080063c0 <pxCurrentTCBConst>:
 80063c0:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063e0:	f7ff fa96 	bl	8005910 <xTaskIncrementTick>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <SysTick_Handler+0x3c>)
 80063ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	2300      	movs	r3, #0
 80063f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <vPortSetupTimerInterrupt+0x30>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <vPortSetupTimerInterrupt+0x34>)
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <vPortSetupTimerInterrupt+0x38>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a09      	ldr	r2, [pc, #36]	; (8006444 <vPortSetupTimerInterrupt+0x3c>)
 800641e:	fba2 2303 	umull	r2, r3, r2, r3
 8006422:	099b      	lsrs	r3, r3, #6
 8006424:	4a08      	ldr	r2, [pc, #32]	; (8006448 <vPortSetupTimerInterrupt+0x40>)
 8006426:	3b01      	subs	r3, #1
 8006428:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <vPortSetupTimerInterrupt+0x30>)
 800642c:	2207      	movs	r2, #7
 800642e:	601a      	str	r2, [r3, #0]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	e000e010 	.word	0xe000e010
 800643c:	e000e018 	.word	0xe000e018
 8006440:	2000009c 	.word	0x2000009c
 8006444:	10624dd3 	.word	0x10624dd3
 8006448:	e000e014 	.word	0xe000e014

0800644c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006458:	f7ff f9b0 	bl	80057bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800645c:	4b57      	ldr	r3, [pc, #348]	; (80065bc <pvPortMalloc+0x170>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006464:	f000 f90c 	bl	8006680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006468:	4b55      	ldr	r3, [pc, #340]	; (80065c0 <pvPortMalloc+0x174>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4013      	ands	r3, r2
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 808c 	bne.w	800658e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01c      	beq.n	80064b6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800647c:	2208      	movs	r2, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4413      	add	r3, r2
 8006482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d013      	beq.n	80064b6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f023 0307 	bic.w	r3, r3, #7
 8006494:	3308      	adds	r3, #8
 8006496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <pvPortMalloc+0x6a>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e7fe      	b.n	80064b4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d068      	beq.n	800658e <pvPortMalloc+0x142>
 80064bc:	4b41      	ldr	r3, [pc, #260]	; (80065c4 <pvPortMalloc+0x178>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d863      	bhi.n	800658e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064c6:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <pvPortMalloc+0x17c>)
 80064c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ca:	4b3f      	ldr	r3, [pc, #252]	; (80065c8 <pvPortMalloc+0x17c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064d0:	e004      	b.n	80064dc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d903      	bls.n	80064ee <pvPortMalloc+0xa2>
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f1      	bne.n	80064d2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064ee:	4b33      	ldr	r3, [pc, #204]	; (80065bc <pvPortMalloc+0x170>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d04a      	beq.n	800658e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2208      	movs	r2, #8
 80064fe:	4413      	add	r3, r2
 8006500:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1ad2      	subs	r2, r2, r3
 8006512:	2308      	movs	r3, #8
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	429a      	cmp	r2, r3
 8006518:	d91e      	bls.n	8006558 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800651a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <pvPortMalloc+0xf4>
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e7fe      	b.n	800653e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006552:	69b8      	ldr	r0, [r7, #24]
 8006554:	f000 f8f6 	bl	8006744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <pvPortMalloc+0x178>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <pvPortMalloc+0x178>)
 8006564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006566:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <pvPortMalloc+0x178>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b18      	ldr	r3, [pc, #96]	; (80065cc <pvPortMalloc+0x180>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d203      	bcs.n	800657a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006572:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <pvPortMalloc+0x178>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <pvPortMalloc+0x180>)
 8006578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <pvPortMalloc+0x174>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	431a      	orrs	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800658e:	f7ff f923 	bl	80057d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	2b00      	cmp	r3, #0
 800659a:	d009      	beq.n	80065b0 <pvPortMalloc+0x164>
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e7fe      	b.n	80065ae <pvPortMalloc+0x162>
	return pvReturn;
 80065b0:	69fb      	ldr	r3, [r7, #28]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3728      	adds	r7, #40	; 0x28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	200020d0 	.word	0x200020d0
 80065c0:	200020dc 	.word	0x200020dc
 80065c4:	200020d4 	.word	0x200020d4
 80065c8:	200020c8 	.word	0x200020c8
 80065cc:	200020d8 	.word	0x200020d8

080065d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d046      	beq.n	8006670 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065e2:	2308      	movs	r3, #8
 80065e4:	425b      	negs	r3, r3
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b20      	ldr	r3, [pc, #128]	; (8006678 <vPortFree+0xa8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d109      	bne.n	8006612 <vPortFree+0x42>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e7fe      	b.n	8006610 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <vPortFree+0x5e>
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	e7fe      	b.n	800662c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <vPortFree+0xa8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4013      	ands	r3, r2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d019      	beq.n	8006670 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d115      	bne.n	8006670 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <vPortFree+0xa8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	43db      	mvns	r3, r3
 800664e:	401a      	ands	r2, r3
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006654:	f7ff f8b2 	bl	80057bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	4b07      	ldr	r3, [pc, #28]	; (800667c <vPortFree+0xac>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4413      	add	r3, r2
 8006662:	4a06      	ldr	r2, [pc, #24]	; (800667c <vPortFree+0xac>)
 8006664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006666:	6938      	ldr	r0, [r7, #16]
 8006668:	f000 f86c 	bl	8006744 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800666c:	f7ff f8b4 	bl	80057d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006670:	bf00      	nop
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200020dc 	.word	0x200020dc
 800667c:	200020d4 	.word	0x200020d4

08006680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006686:	f641 0304 	movw	r3, #6148	; 0x1804
 800668a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800668c:	4b27      	ldr	r3, [pc, #156]	; (800672c <prvHeapInit+0xac>)
 800668e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3307      	adds	r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0307 	bic.w	r3, r3, #7
 80066a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	4a1f      	ldr	r2, [pc, #124]	; (800672c <prvHeapInit+0xac>)
 80066b0:	4413      	add	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066b8:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <prvHeapInit+0xb0>)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <prvHeapInit+0xb0>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4413      	add	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066cc:	2208      	movs	r2, #8
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a15      	ldr	r2, [pc, #84]	; (8006734 <prvHeapInit+0xb4>)
 80066e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066e2:	4b14      	ldr	r3, [pc, #80]	; (8006734 <prvHeapInit+0xb4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ea:	4b12      	ldr	r3, [pc, #72]	; (8006734 <prvHeapInit+0xb4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <prvHeapInit+0xb4>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4a0a      	ldr	r2, [pc, #40]	; (8006738 <prvHeapInit+0xb8>)
 800670e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4a09      	ldr	r2, [pc, #36]	; (800673c <prvHeapInit+0xbc>)
 8006716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006718:	4b09      	ldr	r3, [pc, #36]	; (8006740 <prvHeapInit+0xc0>)
 800671a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800671e:	601a      	str	r2, [r3, #0]
}
 8006720:	bf00      	nop
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	200008c4 	.word	0x200008c4
 8006730:	200020c8 	.word	0x200020c8
 8006734:	200020d0 	.word	0x200020d0
 8006738:	200020d8 	.word	0x200020d8
 800673c:	200020d4 	.word	0x200020d4
 8006740:	200020dc 	.word	0x200020dc

08006744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800674c:	4b27      	ldr	r3, [pc, #156]	; (80067ec <prvInsertBlockIntoFreeList+0xa8>)
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e002      	b.n	8006758 <prvInsertBlockIntoFreeList+0x14>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d8f7      	bhi.n	8006752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4413      	add	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d108      	bne.n	8006786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d118      	bne.n	80067cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <prvInsertBlockIntoFreeList+0xac>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d00d      	beq.n	80067c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	441a      	add	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e008      	b.n	80067d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <prvInsertBlockIntoFreeList+0xac>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e003      	b.n	80067d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d002      	beq.n	80067e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr
 80067ec:	200020c8 	.word	0x200020c8
 80067f0:	200020d0 	.word	0x200020d0

080067f4 <__errno>:
 80067f4:	4b01      	ldr	r3, [pc, #4]	; (80067fc <__errno+0x8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	200000ac 	.word	0x200000ac

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	2500      	movs	r5, #0
 8006804:	4e0c      	ldr	r6, [pc, #48]	; (8006838 <__libc_init_array+0x38>)
 8006806:	4c0d      	ldr	r4, [pc, #52]	; (800683c <__libc_init_array+0x3c>)
 8006808:	1ba4      	subs	r4, r4, r6
 800680a:	10a4      	asrs	r4, r4, #2
 800680c:	42a5      	cmp	r5, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	f000 fc36 	bl	8007080 <_init>
 8006814:	2500      	movs	r5, #0
 8006816:	4e0a      	ldr	r6, [pc, #40]	; (8006840 <__libc_init_array+0x40>)
 8006818:	4c0a      	ldr	r4, [pc, #40]	; (8006844 <__libc_init_array+0x44>)
 800681a:	1ba4      	subs	r4, r4, r6
 800681c:	10a4      	asrs	r4, r4, #2
 800681e:	42a5      	cmp	r5, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006828:	4798      	blx	r3
 800682a:	3501      	adds	r5, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006832:	4798      	blx	r3
 8006834:	3501      	adds	r5, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	08007fc0 	.word	0x08007fc0
 800683c:	08007fc0 	.word	0x08007fc0
 8006840:	08007fc0 	.word	0x08007fc0
 8006844:	08007fc4 	.word	0x08007fc4

08006848 <memcpy>:
 8006848:	b510      	push	{r4, lr}
 800684a:	1e43      	subs	r3, r0, #1
 800684c:	440a      	add	r2, r1
 800684e:	4291      	cmp	r1, r2
 8006850:	d100      	bne.n	8006854 <memcpy+0xc>
 8006852:	bd10      	pop	{r4, pc}
 8006854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685c:	e7f7      	b.n	800684e <memcpy+0x6>

0800685e <memset>:
 800685e:	4603      	mov	r3, r0
 8006860:	4402      	add	r2, r0
 8006862:	4293      	cmp	r3, r2
 8006864:	d100      	bne.n	8006868 <memset+0xa>
 8006866:	4770      	bx	lr
 8006868:	f803 1b01 	strb.w	r1, [r3], #1
 800686c:	e7f9      	b.n	8006862 <memset+0x4>
	...

08006870 <siprintf>:
 8006870:	b40e      	push	{r1, r2, r3}
 8006872:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006876:	b500      	push	{lr}
 8006878:	b09c      	sub	sp, #112	; 0x70
 800687a:	ab1d      	add	r3, sp, #116	; 0x74
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	9006      	str	r0, [sp, #24]
 8006880:	9107      	str	r1, [sp, #28]
 8006882:	9104      	str	r1, [sp, #16]
 8006884:	4808      	ldr	r0, [pc, #32]	; (80068a8 <siprintf+0x38>)
 8006886:	4909      	ldr	r1, [pc, #36]	; (80068ac <siprintf+0x3c>)
 8006888:	f853 2b04 	ldr.w	r2, [r3], #4
 800688c:	9105      	str	r1, [sp, #20]
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	a902      	add	r1, sp, #8
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	f000 f866 	bl	8006964 <_svfiprintf_r>
 8006898:	2200      	movs	r2, #0
 800689a:	9b02      	ldr	r3, [sp, #8]
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	b01c      	add	sp, #112	; 0x70
 80068a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a4:	b003      	add	sp, #12
 80068a6:	4770      	bx	lr
 80068a8:	200000ac 	.word	0x200000ac
 80068ac:	ffff0208 	.word	0xffff0208

080068b0 <__ssputs_r>:
 80068b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	688e      	ldr	r6, [r1, #8]
 80068b6:	4682      	mov	sl, r0
 80068b8:	429e      	cmp	r6, r3
 80068ba:	460c      	mov	r4, r1
 80068bc:	4690      	mov	r8, r2
 80068be:	4699      	mov	r9, r3
 80068c0:	d837      	bhi.n	8006932 <__ssputs_r+0x82>
 80068c2:	898a      	ldrh	r2, [r1, #12]
 80068c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068c8:	d031      	beq.n	800692e <__ssputs_r+0x7e>
 80068ca:	2302      	movs	r3, #2
 80068cc:	6825      	ldr	r5, [r4, #0]
 80068ce:	6909      	ldr	r1, [r1, #16]
 80068d0:	1a6f      	subs	r7, r5, r1
 80068d2:	6965      	ldr	r5, [r4, #20]
 80068d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80068dc:	f109 0301 	add.w	r3, r9, #1
 80068e0:	443b      	add	r3, r7
 80068e2:	429d      	cmp	r5, r3
 80068e4:	bf38      	it	cc
 80068e6:	461d      	movcc	r5, r3
 80068e8:	0553      	lsls	r3, r2, #21
 80068ea:	d530      	bpl.n	800694e <__ssputs_r+0x9e>
 80068ec:	4629      	mov	r1, r5
 80068ee:	f000 fb2d 	bl	8006f4c <_malloc_r>
 80068f2:	4606      	mov	r6, r0
 80068f4:	b950      	cbnz	r0, 800690c <__ssputs_r+0x5c>
 80068f6:	230c      	movs	r3, #12
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	f8ca 3000 	str.w	r3, [sl]
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006906:	81a3      	strh	r3, [r4, #12]
 8006908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690c:	463a      	mov	r2, r7
 800690e:	6921      	ldr	r1, [r4, #16]
 8006910:	f7ff ff9a 	bl	8006848 <memcpy>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800691a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	6126      	str	r6, [r4, #16]
 8006922:	443e      	add	r6, r7
 8006924:	6026      	str	r6, [r4, #0]
 8006926:	464e      	mov	r6, r9
 8006928:	6165      	str	r5, [r4, #20]
 800692a:	1bed      	subs	r5, r5, r7
 800692c:	60a5      	str	r5, [r4, #8]
 800692e:	454e      	cmp	r6, r9
 8006930:	d900      	bls.n	8006934 <__ssputs_r+0x84>
 8006932:	464e      	mov	r6, r9
 8006934:	4632      	mov	r2, r6
 8006936:	4641      	mov	r1, r8
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	f000 faa1 	bl	8006e80 <memmove>
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	2000      	movs	r0, #0
 8006942:	1b9b      	subs	r3, r3, r6
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	441e      	add	r6, r3
 800694a:	6026      	str	r6, [r4, #0]
 800694c:	e7dc      	b.n	8006908 <__ssputs_r+0x58>
 800694e:	462a      	mov	r2, r5
 8006950:	f000 fb56 	bl	8007000 <_realloc_r>
 8006954:	4606      	mov	r6, r0
 8006956:	2800      	cmp	r0, #0
 8006958:	d1e2      	bne.n	8006920 <__ssputs_r+0x70>
 800695a:	6921      	ldr	r1, [r4, #16]
 800695c:	4650      	mov	r0, sl
 800695e:	f000 faa9 	bl	8006eb4 <_free_r>
 8006962:	e7c8      	b.n	80068f6 <__ssputs_r+0x46>

08006964 <_svfiprintf_r>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	461d      	mov	r5, r3
 800696a:	898b      	ldrh	r3, [r1, #12]
 800696c:	b09d      	sub	sp, #116	; 0x74
 800696e:	061f      	lsls	r7, r3, #24
 8006970:	4680      	mov	r8, r0
 8006972:	460c      	mov	r4, r1
 8006974:	4616      	mov	r6, r2
 8006976:	d50f      	bpl.n	8006998 <_svfiprintf_r+0x34>
 8006978:	690b      	ldr	r3, [r1, #16]
 800697a:	b96b      	cbnz	r3, 8006998 <_svfiprintf_r+0x34>
 800697c:	2140      	movs	r1, #64	; 0x40
 800697e:	f000 fae5 	bl	8006f4c <_malloc_r>
 8006982:	6020      	str	r0, [r4, #0]
 8006984:	6120      	str	r0, [r4, #16]
 8006986:	b928      	cbnz	r0, 8006994 <_svfiprintf_r+0x30>
 8006988:	230c      	movs	r3, #12
 800698a:	f8c8 3000 	str.w	r3, [r8]
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	e0c8      	b.n	8006b26 <_svfiprintf_r+0x1c2>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	6163      	str	r3, [r4, #20]
 8006998:	2300      	movs	r3, #0
 800699a:	9309      	str	r3, [sp, #36]	; 0x24
 800699c:	2320      	movs	r3, #32
 800699e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069a2:	2330      	movs	r3, #48	; 0x30
 80069a4:	f04f 0b01 	mov.w	fp, #1
 80069a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069ac:	9503      	str	r5, [sp, #12]
 80069ae:	4637      	mov	r7, r6
 80069b0:	463d      	mov	r5, r7
 80069b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069b6:	b10b      	cbz	r3, 80069bc <_svfiprintf_r+0x58>
 80069b8:	2b25      	cmp	r3, #37	; 0x25
 80069ba:	d13e      	bne.n	8006a3a <_svfiprintf_r+0xd6>
 80069bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80069c0:	d00b      	beq.n	80069da <_svfiprintf_r+0x76>
 80069c2:	4653      	mov	r3, sl
 80069c4:	4632      	mov	r2, r6
 80069c6:	4621      	mov	r1, r4
 80069c8:	4640      	mov	r0, r8
 80069ca:	f7ff ff71 	bl	80068b0 <__ssputs_r>
 80069ce:	3001      	adds	r0, #1
 80069d0:	f000 80a4 	beq.w	8006b1c <_svfiprintf_r+0x1b8>
 80069d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d6:	4453      	add	r3, sl
 80069d8:	9309      	str	r3, [sp, #36]	; 0x24
 80069da:	783b      	ldrb	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 809d 	beq.w	8006b1c <_svfiprintf_r+0x1b8>
 80069e2:	2300      	movs	r3, #0
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	9307      	str	r3, [sp, #28]
 80069f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069f4:	931a      	str	r3, [sp, #104]	; 0x68
 80069f6:	462f      	mov	r7, r5
 80069f8:	2205      	movs	r2, #5
 80069fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80069fe:	4850      	ldr	r0, [pc, #320]	; (8006b40 <_svfiprintf_r+0x1dc>)
 8006a00:	f000 fa30 	bl	8006e64 <memchr>
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	b9d0      	cbnz	r0, 8006a3e <_svfiprintf_r+0xda>
 8006a08:	06d9      	lsls	r1, r3, #27
 8006a0a:	bf44      	itt	mi
 8006a0c:	2220      	movmi	r2, #32
 8006a0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a12:	071a      	lsls	r2, r3, #28
 8006a14:	bf44      	itt	mi
 8006a16:	222b      	movmi	r2, #43	; 0x2b
 8006a18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a1c:	782a      	ldrb	r2, [r5, #0]
 8006a1e:	2a2a      	cmp	r2, #42	; 0x2a
 8006a20:	d015      	beq.n	8006a4e <_svfiprintf_r+0xea>
 8006a22:	462f      	mov	r7, r5
 8006a24:	2000      	movs	r0, #0
 8006a26:	250a      	movs	r5, #10
 8006a28:	9a07      	ldr	r2, [sp, #28]
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a30:	3b30      	subs	r3, #48	; 0x30
 8006a32:	2b09      	cmp	r3, #9
 8006a34:	d94d      	bls.n	8006ad2 <_svfiprintf_r+0x16e>
 8006a36:	b1b8      	cbz	r0, 8006a68 <_svfiprintf_r+0x104>
 8006a38:	e00f      	b.n	8006a5a <_svfiprintf_r+0xf6>
 8006a3a:	462f      	mov	r7, r5
 8006a3c:	e7b8      	b.n	80069b0 <_svfiprintf_r+0x4c>
 8006a3e:	4a40      	ldr	r2, [pc, #256]	; (8006b40 <_svfiprintf_r+0x1dc>)
 8006a40:	463d      	mov	r5, r7
 8006a42:	1a80      	subs	r0, r0, r2
 8006a44:	fa0b f000 	lsl.w	r0, fp, r0
 8006a48:	4318      	orrs	r0, r3
 8006a4a:	9004      	str	r0, [sp, #16]
 8006a4c:	e7d3      	b.n	80069f6 <_svfiprintf_r+0x92>
 8006a4e:	9a03      	ldr	r2, [sp, #12]
 8006a50:	1d11      	adds	r1, r2, #4
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	9103      	str	r1, [sp, #12]
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	db01      	blt.n	8006a5e <_svfiprintf_r+0xfa>
 8006a5a:	9207      	str	r2, [sp, #28]
 8006a5c:	e004      	b.n	8006a68 <_svfiprintf_r+0x104>
 8006a5e:	4252      	negs	r2, r2
 8006a60:	f043 0302 	orr.w	r3, r3, #2
 8006a64:	9207      	str	r2, [sp, #28]
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	783b      	ldrb	r3, [r7, #0]
 8006a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a6c:	d10c      	bne.n	8006a88 <_svfiprintf_r+0x124>
 8006a6e:	787b      	ldrb	r3, [r7, #1]
 8006a70:	2b2a      	cmp	r3, #42	; 0x2a
 8006a72:	d133      	bne.n	8006adc <_svfiprintf_r+0x178>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	3702      	adds	r7, #2
 8006a78:	1d1a      	adds	r2, r3, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	9203      	str	r2, [sp, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfb8      	it	lt
 8006a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	4d2e      	ldr	r5, [pc, #184]	; (8006b44 <_svfiprintf_r+0x1e0>)
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	7839      	ldrb	r1, [r7, #0]
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f9e8 	bl	8006e64 <memchr>
 8006a94:	b138      	cbz	r0, 8006aa6 <_svfiprintf_r+0x142>
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	1b40      	subs	r0, r0, r5
 8006a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	3701      	adds	r7, #1
 8006aa2:	4303      	orrs	r3, r0
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	7839      	ldrb	r1, [r7, #0]
 8006aa8:	2206      	movs	r2, #6
 8006aaa:	4827      	ldr	r0, [pc, #156]	; (8006b48 <_svfiprintf_r+0x1e4>)
 8006aac:	1c7e      	adds	r6, r7, #1
 8006aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ab2:	f000 f9d7 	bl	8006e64 <memchr>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d038      	beq.n	8006b2c <_svfiprintf_r+0x1c8>
 8006aba:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <_svfiprintf_r+0x1e8>)
 8006abc:	bb13      	cbnz	r3, 8006b04 <_svfiprintf_r+0x1a0>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	3307      	adds	r3, #7
 8006ac2:	f023 0307 	bic.w	r3, r3, #7
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	9303      	str	r3, [sp, #12]
 8006aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006acc:	444b      	add	r3, r9
 8006ace:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad0:	e76d      	b.n	80069ae <_svfiprintf_r+0x4a>
 8006ad2:	fb05 3202 	mla	r2, r5, r2, r3
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	460f      	mov	r7, r1
 8006ada:	e7a6      	b.n	8006a2a <_svfiprintf_r+0xc6>
 8006adc:	2300      	movs	r3, #0
 8006ade:	250a      	movs	r5, #10
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	3701      	adds	r7, #1
 8006ae4:	9305      	str	r3, [sp, #20]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aec:	3a30      	subs	r2, #48	; 0x30
 8006aee:	2a09      	cmp	r2, #9
 8006af0:	d903      	bls.n	8006afa <_svfiprintf_r+0x196>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0c8      	beq.n	8006a88 <_svfiprintf_r+0x124>
 8006af6:	9105      	str	r1, [sp, #20]
 8006af8:	e7c6      	b.n	8006a88 <_svfiprintf_r+0x124>
 8006afa:	fb05 2101 	mla	r1, r5, r1, r2
 8006afe:	2301      	movs	r3, #1
 8006b00:	4607      	mov	r7, r0
 8006b02:	e7f0      	b.n	8006ae6 <_svfiprintf_r+0x182>
 8006b04:	ab03      	add	r3, sp, #12
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <_svfiprintf_r+0x1ec>)
 8006b0c:	a904      	add	r1, sp, #16
 8006b0e:	4640      	mov	r0, r8
 8006b10:	f3af 8000 	nop.w
 8006b14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b18:	4681      	mov	r9, r0
 8006b1a:	d1d6      	bne.n	8006aca <_svfiprintf_r+0x166>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	065b      	lsls	r3, r3, #25
 8006b20:	f53f af35 	bmi.w	800698e <_svfiprintf_r+0x2a>
 8006b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b26:	b01d      	add	sp, #116	; 0x74
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	4622      	mov	r2, r4
 8006b32:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <_svfiprintf_r+0x1ec>)
 8006b34:	a904      	add	r1, sp, #16
 8006b36:	4640      	mov	r0, r8
 8006b38:	f000 f882 	bl	8006c40 <_printf_i>
 8006b3c:	e7ea      	b.n	8006b14 <_svfiprintf_r+0x1b0>
 8006b3e:	bf00      	nop
 8006b40:	08007f8c 	.word	0x08007f8c
 8006b44:	08007f92 	.word	0x08007f92
 8006b48:	08007f96 	.word	0x08007f96
 8006b4c:	00000000 	.word	0x00000000
 8006b50:	080068b1 	.word	0x080068b1

08006b54 <_printf_common>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	4691      	mov	r9, r2
 8006b5a:	461f      	mov	r7, r3
 8006b5c:	688a      	ldr	r2, [r1, #8]
 8006b5e:	690b      	ldr	r3, [r1, #16]
 8006b60:	4606      	mov	r6, r0
 8006b62:	4293      	cmp	r3, r2
 8006b64:	bfb8      	it	lt
 8006b66:	4613      	movlt	r3, r2
 8006b68:	f8c9 3000 	str.w	r3, [r9]
 8006b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b70:	460c      	mov	r4, r1
 8006b72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b76:	b112      	cbz	r2, 8006b7e <_printf_common+0x2a>
 8006b78:	3301      	adds	r3, #1
 8006b7a:	f8c9 3000 	str.w	r3, [r9]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	0699      	lsls	r1, r3, #26
 8006b82:	bf42      	ittt	mi
 8006b84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b88:	3302      	addmi	r3, #2
 8006b8a:	f8c9 3000 	strmi.w	r3, [r9]
 8006b8e:	6825      	ldr	r5, [r4, #0]
 8006b90:	f015 0506 	ands.w	r5, r5, #6
 8006b94:	d107      	bne.n	8006ba6 <_printf_common+0x52>
 8006b96:	f104 0a19 	add.w	sl, r4, #25
 8006b9a:	68e3      	ldr	r3, [r4, #12]
 8006b9c:	f8d9 2000 	ldr.w	r2, [r9]
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	42ab      	cmp	r3, r5
 8006ba4:	dc29      	bgt.n	8006bfa <_printf_common+0xa6>
 8006ba6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	3300      	adds	r3, #0
 8006bae:	bf18      	it	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	0692      	lsls	r2, r2, #26
 8006bb4:	d42e      	bmi.n	8006c14 <_printf_common+0xc0>
 8006bb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bba:	4639      	mov	r1, r7
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	47c0      	blx	r8
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d021      	beq.n	8006c08 <_printf_common+0xb4>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	68e5      	ldr	r5, [r4, #12]
 8006bc8:	f003 0306 	and.w	r3, r3, #6
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	bf18      	it	ne
 8006bd0:	2500      	movne	r5, #0
 8006bd2:	f8d9 2000 	ldr.w	r2, [r9]
 8006bd6:	f04f 0900 	mov.w	r9, #0
 8006bda:	bf08      	it	eq
 8006bdc:	1aad      	subeq	r5, r5, r2
 8006bde:	68a3      	ldr	r3, [r4, #8]
 8006be0:	6922      	ldr	r2, [r4, #16]
 8006be2:	bf08      	it	eq
 8006be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be8:	4293      	cmp	r3, r2
 8006bea:	bfc4      	itt	gt
 8006bec:	1a9b      	subgt	r3, r3, r2
 8006bee:	18ed      	addgt	r5, r5, r3
 8006bf0:	341a      	adds	r4, #26
 8006bf2:	454d      	cmp	r5, r9
 8006bf4:	d11a      	bne.n	8006c2c <_printf_common+0xd8>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e008      	b.n	8006c0c <_printf_common+0xb8>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4630      	mov	r0, r6
 8006c02:	47c0      	blx	r8
 8006c04:	3001      	adds	r0, #1
 8006c06:	d103      	bne.n	8006c10 <_printf_common+0xbc>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	3501      	adds	r5, #1
 8006c12:	e7c2      	b.n	8006b9a <_printf_common+0x46>
 8006c14:	2030      	movs	r0, #48	; 0x30
 8006c16:	18e1      	adds	r1, r4, r3
 8006c18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c22:	4422      	add	r2, r4
 8006c24:	3302      	adds	r3, #2
 8006c26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c2a:	e7c4      	b.n	8006bb6 <_printf_common+0x62>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4639      	mov	r1, r7
 8006c32:	4630      	mov	r0, r6
 8006c34:	47c0      	blx	r8
 8006c36:	3001      	adds	r0, #1
 8006c38:	d0e6      	beq.n	8006c08 <_printf_common+0xb4>
 8006c3a:	f109 0901 	add.w	r9, r9, #1
 8006c3e:	e7d8      	b.n	8006bf2 <_printf_common+0x9e>

08006c40 <_printf_i>:
 8006c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c48:	460c      	mov	r4, r1
 8006c4a:	7e09      	ldrb	r1, [r1, #24]
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	296e      	cmp	r1, #110	; 0x6e
 8006c50:	4617      	mov	r7, r2
 8006c52:	4606      	mov	r6, r0
 8006c54:	4698      	mov	r8, r3
 8006c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c58:	f000 80b3 	beq.w	8006dc2 <_printf_i+0x182>
 8006c5c:	d822      	bhi.n	8006ca4 <_printf_i+0x64>
 8006c5e:	2963      	cmp	r1, #99	; 0x63
 8006c60:	d036      	beq.n	8006cd0 <_printf_i+0x90>
 8006c62:	d80a      	bhi.n	8006c7a <_printf_i+0x3a>
 8006c64:	2900      	cmp	r1, #0
 8006c66:	f000 80b9 	beq.w	8006ddc <_printf_i+0x19c>
 8006c6a:	2958      	cmp	r1, #88	; 0x58
 8006c6c:	f000 8083 	beq.w	8006d76 <_printf_i+0x136>
 8006c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c78:	e032      	b.n	8006ce0 <_printf_i+0xa0>
 8006c7a:	2964      	cmp	r1, #100	; 0x64
 8006c7c:	d001      	beq.n	8006c82 <_printf_i+0x42>
 8006c7e:	2969      	cmp	r1, #105	; 0x69
 8006c80:	d1f6      	bne.n	8006c70 <_printf_i+0x30>
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	6813      	ldr	r3, [r2, #0]
 8006c86:	0605      	lsls	r5, r0, #24
 8006c88:	f103 0104 	add.w	r1, r3, #4
 8006c8c:	d52a      	bpl.n	8006ce4 <_printf_i+0xa4>
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6011      	str	r1, [r2, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da03      	bge.n	8006c9e <_printf_i+0x5e>
 8006c96:	222d      	movs	r2, #45	; 0x2d
 8006c98:	425b      	negs	r3, r3
 8006c9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c9e:	486f      	ldr	r0, [pc, #444]	; (8006e5c <_printf_i+0x21c>)
 8006ca0:	220a      	movs	r2, #10
 8006ca2:	e039      	b.n	8006d18 <_printf_i+0xd8>
 8006ca4:	2973      	cmp	r1, #115	; 0x73
 8006ca6:	f000 809d 	beq.w	8006de4 <_printf_i+0x1a4>
 8006caa:	d808      	bhi.n	8006cbe <_printf_i+0x7e>
 8006cac:	296f      	cmp	r1, #111	; 0x6f
 8006cae:	d020      	beq.n	8006cf2 <_printf_i+0xb2>
 8006cb0:	2970      	cmp	r1, #112	; 0x70
 8006cb2:	d1dd      	bne.n	8006c70 <_printf_i+0x30>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	f043 0320 	orr.w	r3, r3, #32
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	e003      	b.n	8006cc6 <_printf_i+0x86>
 8006cbe:	2975      	cmp	r1, #117	; 0x75
 8006cc0:	d017      	beq.n	8006cf2 <_printf_i+0xb2>
 8006cc2:	2978      	cmp	r1, #120	; 0x78
 8006cc4:	d1d4      	bne.n	8006c70 <_printf_i+0x30>
 8006cc6:	2378      	movs	r3, #120	; 0x78
 8006cc8:	4865      	ldr	r0, [pc, #404]	; (8006e60 <_printf_i+0x220>)
 8006cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cce:	e055      	b.n	8006d7c <_printf_i+0x13c>
 8006cd0:	6813      	ldr	r3, [r2, #0]
 8006cd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd6:	1d19      	adds	r1, r3, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6011      	str	r1, [r2, #0]
 8006cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e08c      	b.n	8006dfe <_printf_i+0x1be>
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cea:	6011      	str	r1, [r2, #0]
 8006cec:	bf18      	it	ne
 8006cee:	b21b      	sxthne	r3, r3
 8006cf0:	e7cf      	b.n	8006c92 <_printf_i+0x52>
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	6825      	ldr	r5, [r4, #0]
 8006cf6:	1d18      	adds	r0, r3, #4
 8006cf8:	6010      	str	r0, [r2, #0]
 8006cfa:	0628      	lsls	r0, r5, #24
 8006cfc:	d501      	bpl.n	8006d02 <_printf_i+0xc2>
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	e002      	b.n	8006d08 <_printf_i+0xc8>
 8006d02:	0668      	lsls	r0, r5, #25
 8006d04:	d5fb      	bpl.n	8006cfe <_printf_i+0xbe>
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	296f      	cmp	r1, #111	; 0x6f
 8006d0a:	bf14      	ite	ne
 8006d0c:	220a      	movne	r2, #10
 8006d0e:	2208      	moveq	r2, #8
 8006d10:	4852      	ldr	r0, [pc, #328]	; (8006e5c <_printf_i+0x21c>)
 8006d12:	2100      	movs	r1, #0
 8006d14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d18:	6865      	ldr	r5, [r4, #4]
 8006d1a:	2d00      	cmp	r5, #0
 8006d1c:	60a5      	str	r5, [r4, #8]
 8006d1e:	f2c0 8095 	blt.w	8006e4c <_printf_i+0x20c>
 8006d22:	6821      	ldr	r1, [r4, #0]
 8006d24:	f021 0104 	bic.w	r1, r1, #4
 8006d28:	6021      	str	r1, [r4, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d13d      	bne.n	8006daa <_printf_i+0x16a>
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	f040 808e 	bne.w	8006e50 <_printf_i+0x210>
 8006d34:	4665      	mov	r5, ip
 8006d36:	2a08      	cmp	r2, #8
 8006d38:	d10b      	bne.n	8006d52 <_printf_i+0x112>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	07db      	lsls	r3, r3, #31
 8006d3e:	d508      	bpl.n	8006d52 <_printf_i+0x112>
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	6862      	ldr	r2, [r4, #4]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	bfde      	ittt	le
 8006d48:	2330      	movle	r3, #48	; 0x30
 8006d4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d52:	ebac 0305 	sub.w	r3, ip, r5
 8006d56:	6123      	str	r3, [r4, #16]
 8006d58:	f8cd 8000 	str.w	r8, [sp]
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	aa03      	add	r2, sp, #12
 8006d60:	4621      	mov	r1, r4
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff fef6 	bl	8006b54 <_printf_common>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d14d      	bne.n	8006e08 <_printf_i+0x1c8>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	b005      	add	sp, #20
 8006d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d76:	4839      	ldr	r0, [pc, #228]	; (8006e5c <_printf_i+0x21c>)
 8006d78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d7c:	6813      	ldr	r3, [r2, #0]
 8006d7e:	6821      	ldr	r1, [r4, #0]
 8006d80:	1d1d      	adds	r5, r3, #4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6015      	str	r5, [r2, #0]
 8006d86:	060a      	lsls	r2, r1, #24
 8006d88:	d50b      	bpl.n	8006da2 <_printf_i+0x162>
 8006d8a:	07ca      	lsls	r2, r1, #31
 8006d8c:	bf44      	itt	mi
 8006d8e:	f041 0120 	orrmi.w	r1, r1, #32
 8006d92:	6021      	strmi	r1, [r4, #0]
 8006d94:	b91b      	cbnz	r3, 8006d9e <_printf_i+0x15e>
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	f022 0220 	bic.w	r2, r2, #32
 8006d9c:	6022      	str	r2, [r4, #0]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	e7b7      	b.n	8006d12 <_printf_i+0xd2>
 8006da2:	064d      	lsls	r5, r1, #25
 8006da4:	bf48      	it	mi
 8006da6:	b29b      	uxthmi	r3, r3
 8006da8:	e7ef      	b.n	8006d8a <_printf_i+0x14a>
 8006daa:	4665      	mov	r5, ip
 8006dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8006db0:	fb02 3311 	mls	r3, r2, r1, r3
 8006db4:	5cc3      	ldrb	r3, [r0, r3]
 8006db6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006dba:	460b      	mov	r3, r1
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	d1f5      	bne.n	8006dac <_printf_i+0x16c>
 8006dc0:	e7b9      	b.n	8006d36 <_printf_i+0xf6>
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	1d18      	adds	r0, r3, #4
 8006dc8:	6961      	ldr	r1, [r4, #20]
 8006dca:	6010      	str	r0, [r2, #0]
 8006dcc:	0628      	lsls	r0, r5, #24
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	d501      	bpl.n	8006dd6 <_printf_i+0x196>
 8006dd2:	6019      	str	r1, [r3, #0]
 8006dd4:	e002      	b.n	8006ddc <_printf_i+0x19c>
 8006dd6:	066a      	lsls	r2, r5, #25
 8006dd8:	d5fb      	bpl.n	8006dd2 <_printf_i+0x192>
 8006dda:	8019      	strh	r1, [r3, #0]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4665      	mov	r5, ip
 8006de0:	6123      	str	r3, [r4, #16]
 8006de2:	e7b9      	b.n	8006d58 <_printf_i+0x118>
 8006de4:	6813      	ldr	r3, [r2, #0]
 8006de6:	1d19      	adds	r1, r3, #4
 8006de8:	6011      	str	r1, [r2, #0]
 8006dea:	681d      	ldr	r5, [r3, #0]
 8006dec:	6862      	ldr	r2, [r4, #4]
 8006dee:	2100      	movs	r1, #0
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 f837 	bl	8006e64 <memchr>
 8006df6:	b108      	cbz	r0, 8006dfc <_printf_i+0x1bc>
 8006df8:	1b40      	subs	r0, r0, r5
 8006dfa:	6060      	str	r0, [r4, #4]
 8006dfc:	6863      	ldr	r3, [r4, #4]
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	2300      	movs	r3, #0
 8006e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e06:	e7a7      	b.n	8006d58 <_printf_i+0x118>
 8006e08:	6923      	ldr	r3, [r4, #16]
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	4630      	mov	r0, r6
 8006e10:	47c0      	blx	r8
 8006e12:	3001      	adds	r0, #1
 8006e14:	d0aa      	beq.n	8006d6c <_printf_i+0x12c>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	079b      	lsls	r3, r3, #30
 8006e1a:	d413      	bmi.n	8006e44 <_printf_i+0x204>
 8006e1c:	68e0      	ldr	r0, [r4, #12]
 8006e1e:	9b03      	ldr	r3, [sp, #12]
 8006e20:	4298      	cmp	r0, r3
 8006e22:	bfb8      	it	lt
 8006e24:	4618      	movlt	r0, r3
 8006e26:	e7a3      	b.n	8006d70 <_printf_i+0x130>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	464a      	mov	r2, r9
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	4630      	mov	r0, r6
 8006e30:	47c0      	blx	r8
 8006e32:	3001      	adds	r0, #1
 8006e34:	d09a      	beq.n	8006d6c <_printf_i+0x12c>
 8006e36:	3501      	adds	r5, #1
 8006e38:	68e3      	ldr	r3, [r4, #12]
 8006e3a:	9a03      	ldr	r2, [sp, #12]
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	42ab      	cmp	r3, r5
 8006e40:	dcf2      	bgt.n	8006e28 <_printf_i+0x1e8>
 8006e42:	e7eb      	b.n	8006e1c <_printf_i+0x1dc>
 8006e44:	2500      	movs	r5, #0
 8006e46:	f104 0919 	add.w	r9, r4, #25
 8006e4a:	e7f5      	b.n	8006e38 <_printf_i+0x1f8>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1ac      	bne.n	8006daa <_printf_i+0x16a>
 8006e50:	7803      	ldrb	r3, [r0, #0]
 8006e52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e5a:	e76c      	b.n	8006d36 <_printf_i+0xf6>
 8006e5c:	08007f9d 	.word	0x08007f9d
 8006e60:	08007fae 	.word	0x08007fae

08006e64 <memchr>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	b2c9      	uxtb	r1, r1
 8006e68:	4402      	add	r2, r0
 8006e6a:	4290      	cmp	r0, r2
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	d101      	bne.n	8006e74 <memchr+0x10>
 8006e70:	2300      	movs	r3, #0
 8006e72:	e003      	b.n	8006e7c <memchr+0x18>
 8006e74:	781c      	ldrb	r4, [r3, #0]
 8006e76:	3001      	adds	r0, #1
 8006e78:	428c      	cmp	r4, r1
 8006e7a:	d1f6      	bne.n	8006e6a <memchr+0x6>
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	bd10      	pop	{r4, pc}

08006e80 <memmove>:
 8006e80:	4288      	cmp	r0, r1
 8006e82:	b510      	push	{r4, lr}
 8006e84:	eb01 0302 	add.w	r3, r1, r2
 8006e88:	d807      	bhi.n	8006e9a <memmove+0x1a>
 8006e8a:	1e42      	subs	r2, r0, #1
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	d00a      	beq.n	8006ea6 <memmove+0x26>
 8006e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e94:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e98:	e7f8      	b.n	8006e8c <memmove+0xc>
 8006e9a:	4283      	cmp	r3, r0
 8006e9c:	d9f5      	bls.n	8006e8a <memmove+0xa>
 8006e9e:	1881      	adds	r1, r0, r2
 8006ea0:	1ad2      	subs	r2, r2, r3
 8006ea2:	42d3      	cmn	r3, r2
 8006ea4:	d100      	bne.n	8006ea8 <memmove+0x28>
 8006ea6:	bd10      	pop	{r4, pc}
 8006ea8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006eb0:	e7f7      	b.n	8006ea2 <memmove+0x22>
	...

08006eb4 <_free_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	d043      	beq.n	8006f44 <_free_r+0x90>
 8006ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec0:	1f0c      	subs	r4, r1, #4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bfb8      	it	lt
 8006ec6:	18e4      	addlt	r4, r4, r3
 8006ec8:	f000 f8d0 	bl	800706c <__malloc_lock>
 8006ecc:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <_free_r+0x94>)
 8006ece:	6813      	ldr	r3, [r2, #0]
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	b933      	cbnz	r3, 8006ee2 <_free_r+0x2e>
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	6014      	str	r4, [r2, #0]
 8006ed8:	4628      	mov	r0, r5
 8006eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ede:	f000 b8c6 	b.w	800706e <__malloc_unlock>
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	d90b      	bls.n	8006efe <_free_r+0x4a>
 8006ee6:	6821      	ldr	r1, [r4, #0]
 8006ee8:	1862      	adds	r2, r4, r1
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bf01      	itttt	eq
 8006eee:	681a      	ldreq	r2, [r3, #0]
 8006ef0:	685b      	ldreq	r3, [r3, #4]
 8006ef2:	1852      	addeq	r2, r2, r1
 8006ef4:	6022      	streq	r2, [r4, #0]
 8006ef6:	6063      	str	r3, [r4, #4]
 8006ef8:	6004      	str	r4, [r0, #0]
 8006efa:	e7ed      	b.n	8006ed8 <_free_r+0x24>
 8006efc:	4613      	mov	r3, r2
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	b10a      	cbz	r2, 8006f06 <_free_r+0x52>
 8006f02:	42a2      	cmp	r2, r4
 8006f04:	d9fa      	bls.n	8006efc <_free_r+0x48>
 8006f06:	6819      	ldr	r1, [r3, #0]
 8006f08:	1858      	adds	r0, r3, r1
 8006f0a:	42a0      	cmp	r0, r4
 8006f0c:	d10b      	bne.n	8006f26 <_free_r+0x72>
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	4401      	add	r1, r0
 8006f12:	1858      	adds	r0, r3, r1
 8006f14:	4282      	cmp	r2, r0
 8006f16:	6019      	str	r1, [r3, #0]
 8006f18:	d1de      	bne.n	8006ed8 <_free_r+0x24>
 8006f1a:	6810      	ldr	r0, [r2, #0]
 8006f1c:	6852      	ldr	r2, [r2, #4]
 8006f1e:	4401      	add	r1, r0
 8006f20:	6019      	str	r1, [r3, #0]
 8006f22:	605a      	str	r2, [r3, #4]
 8006f24:	e7d8      	b.n	8006ed8 <_free_r+0x24>
 8006f26:	d902      	bls.n	8006f2e <_free_r+0x7a>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	e7d4      	b.n	8006ed8 <_free_r+0x24>
 8006f2e:	6820      	ldr	r0, [r4, #0]
 8006f30:	1821      	adds	r1, r4, r0
 8006f32:	428a      	cmp	r2, r1
 8006f34:	bf01      	itttt	eq
 8006f36:	6811      	ldreq	r1, [r2, #0]
 8006f38:	6852      	ldreq	r2, [r2, #4]
 8006f3a:	1809      	addeq	r1, r1, r0
 8006f3c:	6021      	streq	r1, [r4, #0]
 8006f3e:	6062      	str	r2, [r4, #4]
 8006f40:	605c      	str	r4, [r3, #4]
 8006f42:	e7c9      	b.n	8006ed8 <_free_r+0x24>
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	200020e0 	.word	0x200020e0

08006f4c <_malloc_r>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	1ccd      	adds	r5, r1, #3
 8006f50:	f025 0503 	bic.w	r5, r5, #3
 8006f54:	3508      	adds	r5, #8
 8006f56:	2d0c      	cmp	r5, #12
 8006f58:	bf38      	it	cc
 8006f5a:	250c      	movcc	r5, #12
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	db01      	blt.n	8006f66 <_malloc_r+0x1a>
 8006f62:	42a9      	cmp	r1, r5
 8006f64:	d903      	bls.n	8006f6e <_malloc_r+0x22>
 8006f66:	230c      	movs	r3, #12
 8006f68:	6033      	str	r3, [r6, #0]
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	bd70      	pop	{r4, r5, r6, pc}
 8006f6e:	f000 f87d 	bl	800706c <__malloc_lock>
 8006f72:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <_malloc_r+0xac>)
 8006f74:	6814      	ldr	r4, [r2, #0]
 8006f76:	4621      	mov	r1, r4
 8006f78:	b991      	cbnz	r1, 8006fa0 <_malloc_r+0x54>
 8006f7a:	4c20      	ldr	r4, [pc, #128]	; (8006ffc <_malloc_r+0xb0>)
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	b91b      	cbnz	r3, 8006f88 <_malloc_r+0x3c>
 8006f80:	4630      	mov	r0, r6
 8006f82:	f000 f863 	bl	800704c <_sbrk_r>
 8006f86:	6020      	str	r0, [r4, #0]
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f000 f85e 	bl	800704c <_sbrk_r>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d124      	bne.n	8006fde <_malloc_r+0x92>
 8006f94:	230c      	movs	r3, #12
 8006f96:	4630      	mov	r0, r6
 8006f98:	6033      	str	r3, [r6, #0]
 8006f9a:	f000 f868 	bl	800706e <__malloc_unlock>
 8006f9e:	e7e4      	b.n	8006f6a <_malloc_r+0x1e>
 8006fa0:	680b      	ldr	r3, [r1, #0]
 8006fa2:	1b5b      	subs	r3, r3, r5
 8006fa4:	d418      	bmi.n	8006fd8 <_malloc_r+0x8c>
 8006fa6:	2b0b      	cmp	r3, #11
 8006fa8:	d90f      	bls.n	8006fca <_malloc_r+0x7e>
 8006faa:	600b      	str	r3, [r1, #0]
 8006fac:	18cc      	adds	r4, r1, r3
 8006fae:	50cd      	str	r5, [r1, r3]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 f85c 	bl	800706e <__malloc_unlock>
 8006fb6:	f104 000b 	add.w	r0, r4, #11
 8006fba:	1d23      	adds	r3, r4, #4
 8006fbc:	f020 0007 	bic.w	r0, r0, #7
 8006fc0:	1ac3      	subs	r3, r0, r3
 8006fc2:	d0d3      	beq.n	8006f6c <_malloc_r+0x20>
 8006fc4:	425a      	negs	r2, r3
 8006fc6:	50e2      	str	r2, [r4, r3]
 8006fc8:	e7d0      	b.n	8006f6c <_malloc_r+0x20>
 8006fca:	684b      	ldr	r3, [r1, #4]
 8006fcc:	428c      	cmp	r4, r1
 8006fce:	bf16      	itet	ne
 8006fd0:	6063      	strne	r3, [r4, #4]
 8006fd2:	6013      	streq	r3, [r2, #0]
 8006fd4:	460c      	movne	r4, r1
 8006fd6:	e7eb      	b.n	8006fb0 <_malloc_r+0x64>
 8006fd8:	460c      	mov	r4, r1
 8006fda:	6849      	ldr	r1, [r1, #4]
 8006fdc:	e7cc      	b.n	8006f78 <_malloc_r+0x2c>
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d005      	beq.n	8006ff4 <_malloc_r+0xa8>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f82e 	bl	800704c <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d0cf      	beq.n	8006f94 <_malloc_r+0x48>
 8006ff4:	6025      	str	r5, [r4, #0]
 8006ff6:	e7db      	b.n	8006fb0 <_malloc_r+0x64>
 8006ff8:	200020e0 	.word	0x200020e0
 8006ffc:	200020e4 	.word	0x200020e4

08007000 <_realloc_r>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	4607      	mov	r7, r0
 8007004:	4614      	mov	r4, r2
 8007006:	460e      	mov	r6, r1
 8007008:	b921      	cbnz	r1, 8007014 <_realloc_r+0x14>
 800700a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800700e:	4611      	mov	r1, r2
 8007010:	f7ff bf9c 	b.w	8006f4c <_malloc_r>
 8007014:	b922      	cbnz	r2, 8007020 <_realloc_r+0x20>
 8007016:	f7ff ff4d 	bl	8006eb4 <_free_r>
 800701a:	4625      	mov	r5, r4
 800701c:	4628      	mov	r0, r5
 800701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007020:	f000 f826 	bl	8007070 <_malloc_usable_size_r>
 8007024:	42a0      	cmp	r0, r4
 8007026:	d20f      	bcs.n	8007048 <_realloc_r+0x48>
 8007028:	4621      	mov	r1, r4
 800702a:	4638      	mov	r0, r7
 800702c:	f7ff ff8e 	bl	8006f4c <_malloc_r>
 8007030:	4605      	mov	r5, r0
 8007032:	2800      	cmp	r0, #0
 8007034:	d0f2      	beq.n	800701c <_realloc_r+0x1c>
 8007036:	4631      	mov	r1, r6
 8007038:	4622      	mov	r2, r4
 800703a:	f7ff fc05 	bl	8006848 <memcpy>
 800703e:	4631      	mov	r1, r6
 8007040:	4638      	mov	r0, r7
 8007042:	f7ff ff37 	bl	8006eb4 <_free_r>
 8007046:	e7e9      	b.n	800701c <_realloc_r+0x1c>
 8007048:	4635      	mov	r5, r6
 800704a:	e7e7      	b.n	800701c <_realloc_r+0x1c>

0800704c <_sbrk_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	2300      	movs	r3, #0
 8007050:	4c05      	ldr	r4, [pc, #20]	; (8007068 <_sbrk_r+0x1c>)
 8007052:	4605      	mov	r5, r0
 8007054:	4608      	mov	r0, r1
 8007056:	6023      	str	r3, [r4, #0]
 8007058:	f7fa fcda 	bl	8001a10 <_sbrk>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_sbrk_r+0x1a>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	b103      	cbz	r3, 8007066 <_sbrk_r+0x1a>
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	200022d0 	.word	0x200022d0

0800706c <__malloc_lock>:
 800706c:	4770      	bx	lr

0800706e <__malloc_unlock>:
 800706e:	4770      	bx	lr

08007070 <_malloc_usable_size_r>:
 8007070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007074:	1f18      	subs	r0, r3, #4
 8007076:	2b00      	cmp	r3, #0
 8007078:	bfbc      	itt	lt
 800707a:	580b      	ldrlt	r3, [r1, r0]
 800707c:	18c0      	addlt	r0, r0, r3
 800707e:	4770      	bx	lr

08007080 <_init>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr

0800708c <_fini>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	bf00      	nop
 8007090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007092:	bc08      	pop	{r3}
 8007094:	469e      	mov	lr, r3
 8007096:	4770      	bx	lr
